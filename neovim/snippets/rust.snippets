snippet docstring "docstring"
	//! # ${0}
	//!

# snippet derive
# 	#[derive($0)]
snippet derive "#[derive(..)]" b
	#[derive(${1:Debug})]
	$0

snippet struct
	struct ${1} {
		${0}
	}

snippet debug
	format!("{:?}", $0)

snippet match "match pattern"
	match ${1} {
		${2} => ${3}
	}

snippet clamp
	fn clamp(v: f32, lb: f32, ub: f32) -> f32 {
			f32::min(f32::max(v, lb), ub)
	}

snippet prelude
	use crate::prelude::*;

snippet glob
	for entry in glob::glob("**/*.md")? {
			match entry {
					Ok(path) => println!("{:?}", path.display()),
					Err(e) => println!("{:?}", e),
			}
	}

snippet yew-cargo "yew cargo include"
	yew = { git = "https://github.com/yewstack/yew", features=["csr"] }

snippet yew-prelude "use yew"
	use yew::prelude::*;

snippet main-yew "yew main()"
	use yew::prelude::*;

	fn main() {
		yew::Renderer::<App>::new().render();
	}

snippet yew-function-component "yew functional component"
	use yew::prelude::*;

	#[derive(Properties, PartialEq)]
	pub struct Props {
			children: Children,
	}

	#[function_component]
	pub fn ${1}(props: &Props) -> Html {
		html! {
			<div>
				${0}
			</div>
		}
	}

snippet yew-struct-component "yew struct component"
	use yew::{Component, Context, html, Html, Properties};

	#[derive(Default, PartialEq, Properties)]
	pub struct Props;

	pub struct ${1};

	impl Component for ${1} {
		type Message = ();
		type Properties = Props;

		fn create(_ctx: &Context<Self>) -> Self {
			${0}
		}

		fn view(&self, _ctx: &Context<Self>) -> Html {
			html! {
			}
		}
	}

snippet main-bevy "bevy main() template"
	use bevy::prelude::*;

	fn main() {
			App::new().add_plugins(DefaultPlugins).run();
	}

snippet bevy-cargo "bevy Cargo.toml"
	[profile.dev]
	opt-level = 1

	[profile.dev.package."*"]
	opt-level = 3

	[dependencies]
	bevy = "*"

snippet args-structopt "structopt template"
	// clap = { version = "3.2.8", features = ["derive"] }
  use std::path::PathBuf;
  use structopt::StructOpt;

  pub(crate) fn run() -> Result<(), Error> {
		let args = Args::from_args();
		let buffer = std::fs::read(args.input)?;
		${0}
  }

  #[derive(StructOpt)]
  #[structopt(name = "${1:name}")]
  struct Args {
		#[structopt(parse(from_os_str))]
		input: PathBuf,
  }

snippet args "env::args template"
	use std::env;
	fn main() {
			let arguments: Vec<String> = env::args().collect();
			${0}
	}

snippet read
	std::fs::read($1)?;$0

snippet example-errors-anyhow "used for applications (not libraries)"
	use anyhow::{Context, Result};

	fn main() -> Result<()> {
		it.detach().context("Failed to detach the important thing")?;

    let content = std::fs::read(path)
        .with_context(|| format!("Failed to read instrs from {}", path))?;
	}

snippet thiserror "derive macro for Errors, for libraries"
	// errors for libraries (anyhow for bins)
	use thiserror::Error;

	pub type Result<T> = std::result::Result<T, NIFileError>;

	#[derive(Error, Debug)]
	pub enum DataStoreError {
			#[error("data store disconnected")]
			Disconnect(#[from] io::Error),

			/// Represents a failure to read from input.
			#[error("Read error")]
			ReadError { source: std::io::Error },

			#[error("unknown data store error")]
			Unknown,
	}

snippet error-thiserror
	use thiserror::Error;

	#[derive(Error, Debug, PartialEq)]
	pub enum KeyError {
	  #[error("Invalid secret key string")]
  	SkParseError,
	}

snippet read_exact
	let mut buf = vec![0u8; bytes_to_read];
	reader.read_exact(&mut buf)?;

snippet example-pattern-builder-consuming "the builder pattern, consuming"
	// see https://github.com/jeremychone-channel/rust-builder/blob/main/src/web_consuming.rs
	use crate::prelude::*;

	#[derive(Debug)]
	pub struct Request {
		val: String,
	}

	#[derive(Debug)]
	pub struct RequestBuilder {
		val: Option<String>,
	}

	impl RequestBuilder {
		pub fn new() -> Self { RequestBuilder::default() }
		pub fn val(mut self, val: impl Into<String>) -> Self {
				self.url.insert(url.into());
				self
		}
	}

snippet template--prelude "an example crate prelude"
	//! Crate prelude

	pub use crate::error::Error;

	pub type Result<T> = core::result::Result<T, Error>;

	// Generic Wrapper tuple struct for newtype pattern,
	// mostly for external type to type From/TryFrom conversions
	pub struct W<T>(pub T);

	// Personal preference.
	pub use std::format as f;

snippet template--thiserror
	//! Main Crate Error

	#[derive(thiserror::Error, Debug)]
	pub enum Error {
		/// For starter, to remove as code matures.
		#[error("Generic error: {0}")]
		Generic(String),
		/// For starter, to remove as code matures.
		#[error("Static error: {0}")]
		Static(&'static str),

		#[error(transparent)]
		IO(#[from] std::io::Error),
	}

snippet main-clap "clap main()"
	use anyhow::Result;
	use clap::Parser;

	#[derive(Parser, Debug)]
	#[clap(author, version, about, long_about = None)]
	struct Args {
			/// Input file
			#[clap(short, long, value_parser)]
			input: std::path::PathBuf,

			/// Number of times to greet
			#[clap(short, long, value_parser, default_value_t = 1)]
			count: u8,
	}

	fn main() -> Result<()> {
			let args = Args::parse();

			for _ in 0..args.count {
					println!("Hello {:?}!", args.input)
			}

			Ok(())
	}

snippet fncmd "fncmd main()"
	#[fncmd::fncmd]
	pub fn main(
		/// Argument foo
		#[opt(short, long)]
		foo: String,
		/// Argument bar
		#[opt(short, long)]
		bar: Option<String>,
	) {
		println!("{:?} {:?}", foo, bar);
		${0}
	}

snippet tokio-main "tokyo main() template"
	#[tokio::main]
	async fn main() -> Result<(), Box<dyn std::error::Error>> {
		${0}
	}

snippet fn "function"
	${1|fn,pub fn,pub(crate) fn,async pub fn|} ${2:function_name}(${3}) ${4:-> Result<(), Box<dyn Error>> }{
		${0:todo!()}
	}

snippet pubfn "function"
	pub fn ${1:function_name}(${2}) ${3:-> Result<(), Box<dyn Error>> }{
		${0:todo!()}
	}

snippet thread
	thread::spawn(move || {
		${0}
	});

snippet mod
	${1|mod,pub mod,pub(crate) mod|} ${2};${0}

snippet pfn "pub function"
	pub fn ${1:function_name}(${2})${3} {
		${0}
	}
snippet afn "async function"
	async fn ${1:function_name}(${2})${3} {
		${0}
	}
snippet pafn "pub async function"
	pub async fn ${1:function_name}(${2})${3} {
		${0}
	}

snippet bench "Bench function" b
	#[bench]
	fn ${1:bench_function_name}(b: &mut test::Bencher) {
		b.iter(|| {
			${0}
		})
	}

snippet new "Constructor function"
	pub fn new(${2}) -> ${1:Self} {
		$1 { ${3} }
	}

snippet main "Main function"
	pub fn main() {
		${0}
	}
snippet pr "print"
	print!("{}", ${1});

snippet prd "print debug"
	print!("{:?}", ${1});

snippet d "dbg! debugging macro"
	dbg!(${0:${VISUAL}})

snippet d; "dbg! debugging macro statement"
	dbg!(&${1});
	${0}

snippet loggy
	#[allow(dead_code)]
	pub(crate) fn setup_logger() {
			log::set_logger(&loggy::Loggy {
					prefix: "",
					show_time: false,
					show_thread: true,
			})
			.unwrap();
			log::set_max_level(log::LevelFilter::Info); // Or whatever level you want.
	}

# snippet mod
# 	mod ${1:`substitute(substitute(expand("%"), '/', '::', 'g'), '^.*lib::', '', '')`} {
# 		${0}
# 	} /* $1 */

# Testing
snippet as "assert!"
	assert!(${1:predicate});
snippet ase "assert_eq!"
	assert_eq!(${1:expected}, ${2:actual});
snippet test "Unit test function"
	#[test]
	fn ${1:function_name}_test() -> Result<()> {
		${0}
		Ok(())
	}

snippet testmod "Test module" b
	#[cfg(test)]
	mod tests {
		use super::*;
		use std::err::Error;

		#[test]
		fn ${1}_test() -> Result<(), Box<dyn Error>> {
			$0
			Ok(())
		}
	}

snippet from
	impl From<${1}> for ${2} {
    fn from(_: $1) -> Self {
        ${0:todo!()}
    }
	}


snippet ig "#[ignore]"
	#[ignore]
# Attributes
snippet allow "allow lint attribute" b
	#[allow(${1:unused_variables})]
snippet cfg "cfg attribute" b
	#[cfg(${1:target_os = "linux"})]
snippet feat "feature attribute" b
	#![feature(${1:plugin})]
snippet attr "#[..]" b
	#[${1:inline}]
snippet crate "Define create meta attributes"
	// Crate name
	#![crate_name = "${1:crate_name}"]
	// Additional metadata attributes
	#![desc = "${2:Description.}"]
	#![license = "${3:BSD}"]
	#![comment = "${4:Comment.}"]
	// Specify the output type
	#![crate_type = "${5:lib}"]
# Common types
snippet opt "Option<T>"
	Option<${1:i32}>
snippet res "Result<T, E>"
	Result<${1:&str}, ${2:()}>
# Control structures
snippet if
	if ${1} {
		${0:${VISUAL}}
	}
snippet ife "if / else"
	if ${1} {
		${2:${VISUAL}}
	} else {
		${0}
	}
snippet ifl "if let (...)"
	if let ${1:Some($2)} = $3 {
		${0:${VISUAL}}
	}
snippet el "else"
	else {
		${0:${VISUAL}}
	}
snippet eli "else if"
	else if ${1} {
		${0:${VISUAL}}
	}
snippet case "Case clause of pattern match"
	${1:_} => ${2:expression}
snippet = "=> "
	=> $0
snippet loop "loop {}" b
	loop {
		${0:${VISUAL}}
	}
snippet wh "while loop"
	while ${1:condition} {
		${0:${VISUAL}}
	}
snippet whl "while let (...)"
	while let ${1:Some($2)} = $3 {
		${0:${VISUAL}}
	}
snippet for "for ... in ... loop"
	for ${1:i} in ${2} {
		${0}
	}
# Struct
snippet st "Struct definition"
	struct ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} {
		${0}
	}
snippet impl "Struct/Trait implementation"
	impl ${1:Type/Trait}${2: for $3} {
		${0}
	}
snippet stn "Struct with new constructor"
	pub struct ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} {
		${0}
	}

	impl$2 $1$2 {
		pub fn new(${4}) -> Self {
			$1 { ${5} }
		}
	}
snippet ty "Type alias"
	type ${1:NewName} = $2;
snippet enum "enum definition"
	enum ${1:Name} {
		${2},
	}
snippet penum "pub enum definition"
	pub enum ${1:Name} {
		${2},
	}
# Traits
snippet trait "Trait definition"
	trait ${1:Name} {
		${0}
	}
snippet drop "Drop trait implementation (destructor)"
	impl Drop for $1 {
		fn drop(&mut self) {
			${0}
		}
	}
# Statics
snippet ss "static string declaration"
	static ${1}: &'static str = "${0}";
snippet stat "static item declaration"
	static ${1}: ${2:usize} = ${0};
# Concurrency
snippet spawn "spawn a thread"
	thread::spawn(${1:move }|| {
		${0}
	});
snippet chan "Declare (Sender, Receiver) pair of asynchronous channel()"
	let (${1:tx}, ${2:rx}): (Sender<${3:i32}>, Receiver<${4:i32}>) = channel();
# Implementations
snippet asref "AsRef trait implementation"
	impl AsRef<${1:Ref}> for ${2:Type} {
		fn as_ref(&self) -> &${3:$1} {
			&self.${0:field}
		}
	}
snippet asmut "AsMut trait implementation"
	impl AsMut<${1:Ref}> for ${2:Type} {
		fn as_mut(&mut self) -> &mut ${3:$1} {
			&mut self.${0:field}
		}
	}
snippet fd "Struct field definition" w
	${1:name}: ${2:Type},
snippet || "Closure, anonymous function (inline)" i
	${1:move }|$2| { $3 }
snippet |} "Closure, anonymous function (block)" i
	${1:move }|$2| {
		$3
	}
snippet macro "macro_rules!" b
	macro_rules! ${1:name} {
		(${2:matcher}) => (
			$3
		)
	}
snippet boxp "Box::new()"
	Box::new(${0:${VISUAL}})
snippet rc "Rc::new()"
	Rc::new(${0:${VISUAL}})
snippet unim "unimplemented!()"
	unimplemented!()
snippet use "use ...;" b
	use ${1:std::$2};

snippet walkdir
	for entry in WalkDir::new("foo").into_iter().filter_map(|e| e.ok()) {
    println!("{}", entry.path().display());
	}
