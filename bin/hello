#!/bin/sh

# COLORS
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
GRAY='\033[1;30m'
NC='\033[0m'

# Get disk space for root directory in a human-readable format (GB) and get the second line of output
df_output=$(df -h / | sed -n '2p')

# Parse disk space from the output string. Adjust according to your df version output. Here we're getting the 4th field which is typically the available space.
disk_space=$(echo $df_output | awk '{print $4}')

# # Get uptime in seconds
# uptime_seconds=$(cat /proc/uptime | awk '{print $1}')
#
# # Calculate days, hours, minutes and seconds
# uptime_days=$(echo "$uptime_seconds / 60 / 60 / 24" | bc)
# uptime_hours=$(echo "($uptime_seconds / 60 / 60) % 24" | bc)

# Function to convert uptime command output to 'X day(s), Y hour(s)' format
format_uptime() {
    # Get uptime
    uptime_str=$(uptime)

    # Check if the uptime string contains "day"
    if [[ $uptime_str == *"day"* ]]; then
        # Extract days and time
        uptime_days=$(echo $uptime_str | awk -F'up ' '{print $2}' | awk '{print $1}')
        uptime_time=$(echo $uptime_str | awk -F'up ' '{print $2}' | awk '{print $3}')

        if [[ $uptime_time == *"mins"* ]]; then
            uptime_formatted="${uptime_days}d, $uptime_time"
        else
            uptime_hours=$(echo $uptime_time | awk -F':' '{print $1}')
            uptime_mins=$(echo $uptime_time | awk -F':' '{print $2}')
						uptime_formatted="${uptime_days}d ${uptime_hours}h"
        fi

    else
        # Extract uptime
        uptime_time=$(echo $uptime_str | awk -F'up ' '{print $2}' | awk '{print $1}')

        if [[ $uptime_time == *"mins"* ]]; then
            uptime_formatted="$uptime_time"
        else
            uptime_hours=$(echo $uptime_time | awk -F':' '{print $1}')
            uptime_mins=$(echo $uptime_time | awk -F':' '{print $2}')
            uptime_formatted="${uptime_hours}h ${uptime_mins}m"
        fi
    fi

    echo "$uptime_formatted"
}

beat_time() {
	# Time zone for Biel, Switzerland, where .beat time is defined
	Biel_TZ="Europe/Zurich"

	# Get current time in Biel in HH:MM:SS format
	Biel_time=$(TZ=$Biel_TZ date +%T)

	# Extract hours, minutes, and seconds
	hours=$(echo $Biel_time | cut -d: -f1)
	minutes=$(echo $Biel_time | cut -d: -f2)
	seconds=$(echo $Biel_time | cut -d: -f3)

	# Calculate the number of seconds since midnight
	seconds_since_midnight=$((10#$hours*3600 + 10#$minutes*60 + 10#$seconds))

	# Calculate .beats, where each .beat is 86.4 seconds
	beats=$(echo "scale=2; $seconds_since_midnight / 86.4" | bc)

	# Print .beats with leading zeros
	printf '@%04.2f\n' $beats
}

# Get total physical memory (in bytes)
total_memory=$(sysctl -n hw.memsize)

# Get available physical memory (in bytes)
phys_memory=$(sysctl -n hw.physmem)

# Get free memory (in bytes)
free_memory=$(sysctl -n hw.usermem)

# Calculate used memory (in bytes)
used_memory=$(($total_memory + $free_memory))

# Convert bytes to GB
total_memory_gb=$(echo "scale=2; $total_memory/(1024*1024*1024)" | bc)
phys_memory_gb=$(echo "scale=2; $phys_memory/(1024*1024*1024)" | bc)
free_memory_gb=$(echo "scale=2; $free_memory/(1024*1024*1024)" | bc)
used_memory_gb=$(echo "scale=2; $used_memory/(1024*1024*1024)" | bc)

echo "${BLUE}${NC} $disk_space    ${BLUE}󱄄 ${NC} $(format_uptime)${NC} ${BLUE}   󰍛${NC} ${used_memory_gb}Gb"
#echo
#echo "${BLUE}$(date "+%I:%M%p")  $(beat_time)${NC}"
echo
