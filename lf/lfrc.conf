# interpreter for shell commands
set shell sh

set icons
# set hidden # show hidden files by default

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# show hidden
map . set hidden!
map H set hidden!

# fzf
# map f $vi $(fzf)
# cmd fzf_jump ${{
#     res="$( cat ~/.fzf-marks | sed 's/.*:\(.*\)$/\1/;' | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
#     if [ -d "$res" ] ; then
#         cmd="cd"
#     elif [ -f "$res" ] ; then
#         cmd="select"
#     else
#         exit 0
#     fi
#     lf -remote "send $id $cmd \"$res\""
# }}
# map <c-f> :fzf_jump

map <c-p> :quit
map <c-space> :quit
map <esc> :quit

map <c-e> ${{nvim .}}

map } :bottom
map { :top

cmd fzm ${{
    res="$( cat ~/.fzf-marks | sed 's/.*: \(.*\)$/\1/;' | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$res\""
}}
map <c-o> :fzm

cmd aj %lf -remote "send $id cd '$(fzm $1)'"
map a push :aj<space>

# cmd paste $cp-p --lf-paste $id

# use rsync for copying (with progress)
# cmd paste &{{
#     set -- $(cat ~/.local/share/lf/files)
#     mode="$1"
#     shift
#     case "$mode" in
#         copy)
#             rsync -av --ignore-existing --progress -- "$@" . |
#             stdbuf -i0 -o0 -e0 tr '\r' '\n' |
#             while IFS= read -r line; do
#                 lf -remote "send $id echo $line"
#             done
#             ;;
#         move) mv -n -- "$@" .;;
#     esac
#     rm ~/.local/share/lf/files
#     lf -remote "send clear"
# }}

# execute current file (must be executable)
map x $$f
map X !$f

map ~ cd ~
map <c-d> trash
map U !du -csh *

map <c-x> cut
map <c-c> copy
map <c-v> paste

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) nvim $fx;;
        video/*) mpv $fx;;
        image/*) mpv $fx --pause;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map <c-r> push :rename<space>

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    nvim "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# make sure trash folder exists
# %mkdir -p ~/.trash

cmd mkdir %{{
	IFS=" "
	mkdir -p -- "$*"
	lf -remote "send $id select \"$*\""
}}

map <c-n> push :mkdir<space>

cmd touch %{{
	touch -- "$*"
	lf -remote "send $id select \"$*\""
}}

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash-lf

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
map <backspace2> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

set previewer ~/.config/lf/pv.sh
# map i $~/.config/lf/pv.sh $f | less -R
