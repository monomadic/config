#!/usr/bin/env zsh
# VirtualDJ stem packer for macOS - ALAC version
# Dependencies: ffmpeg, MP4Box (gpac)

set -euo pipefail

# VirtualDJ track order (do not change)
TRACK_NAMES=("mixed track" "vocal" "hihat" "bass" "instruments" "kick")

# Required input stems
STEMS=("kick" "instruments" "vocal" "bass" "hihat")

die() { print -r -- "ERROR: $*" >&2; exit 1; }

# Check dependencies
command -v ffmpeg >/dev/null 2>&1 || die "ffmpeg not found"
command -v MP4Box >/dev/null 2>&1 || die "MP4Box not found"

[[ $# -eq 1 ]] || { print "Usage: $(basename "$0") /path/to/stems"; exit 2; }

FOLDER="$(cd "$1" 2>/dev/null && pwd)" || die "Cannot access directory: $1"
[[ -d "$FOLDER" ]] || die "Not a directory: $FOLDER"

# Create temp workspace
tmpdir="$(mktemp -d)"
trap "rm -rf '$tmpdir'" EXIT

# Find input files - simple approach
find_stem() {
  local stem="$1"
  local f
  
  # Direct match
  [[ -f "$FOLDER/${stem}.wav" ]] && { print "$FOLDER/${stem}.wav"; return; }
  
  # Common aliases
  case "$stem" in
    kick)        for f in "$FOLDER"/drums-main.wav "$FOLDER"/kick.wav; do
                   [[ -f "$f" ]] && { print "$f"; return; }
                 done ;;
    hihat)       for f in "$FOLDER"/drums-hihats.wav "$FOLDER"/hihat.wav "$FOLDER"/hihats.wav; do
                   [[ -f "$f" ]] && { print "$f"; return; }
                 done ;;
    instruments) for f in "$FOLDER"/other.wav "$FOLDER"/instruments.wav; do
                   [[ -f "$f" ]] && { print "$f"; return; }
                 done ;;
    vocal)       for f in "$FOLDER"/vocals.wav "$FOLDER"/vocal.wav; do
                   [[ -f "$f" ]] && { print "$f"; return; }
                 done ;;
    bass)        [[ -f "$FOLDER"/bass.wav ]] && { print "$FOLDER/bass.wav"; return; } ;;
  esac
  
  # Case-insensitive fallback
  for f in "$FOLDER"/*.wav; do
    [[ -f "$f" ]] || continue
    local name="$(basename "${f%.wav}" | tr '[:upper:]' '[:lower:]')"
    [[ "$name" == "$stem" ]] && { print "$f"; return; }
  done
  
  return 1
}

# Collect input files
INPUT_FILES=()
for stem in "${STEMS[@]}"; do
  f="$(find_stem "$stem")" || die "Missing: $stem.wav"
  INPUT_FILES+=("$f")
  print "Found $stem: $(basename "$f")"
done

# Create mixed track (all stems combined with 5x volume)
print "Creating mixed track..."
mixed_wav="$tmpdir/mixed.wav"
ffmpeg -y -loglevel error \
  -i "${INPUT_FILES[1]}" \
  -i "${INPUT_FILES[2]}" \
  -i "${INPUT_FILES[3]}" \
  -i "${INPUT_FILES[4]}" \
  -i "${INPUT_FILES[5]}" \
  -filter_complex "amix=inputs=5,volume=5" \
  "$mixed_wav" || die "Mix failed"

# Encode all tracks to ALAC
print "Encoding ALAC tracks..."
ALAC_FILES=()
i=1
for stem in "${STEMS[@]}"; do
  dst="$tmpdir/$stem.m4a"
  ffmpeg -y -loglevel error -i "${INPUT_FILES[$i]}" -c:a alac "$dst" || die "Encode failed: $stem"
  ALAC_FILES+=("$dst")
  print "  Encoded: $stem.m4a (lossless)"
  ((i++))
done

# Encode mixed track
dst="$tmpdir/mixed.m4a"
ffmpeg -y -loglevel error -i "$mixed_wav" -c:a alac "$dst" || die "Encode failed: mixed"
ALAC_FILES+=("$dst")
print "  Encoded: mixed.m4a (lossless)"

print "\nALAC file order for muxing:"
for i in {1..6}; do
  print "  Input $((i-1)): $(basename "${ALAC_FILES[$i]}")"
done

# Mux with correct stream order
# Input: kick(0) instruments(1) vocal(2) bass(3) hihat(4) mixed(5)
# Output: mixed(5) vocal(2) hihat(4) bass(3) instruments(1) kick(0)
print "\nMuxing M4A..."
temp_m4a="$tmpdir/temp.m4a"

ffmpeg -y -loglevel error \
  -i "${ALAC_FILES[1]}" \
  -i "${ALAC_FILES[2]}" \
  -i "${ALAC_FILES[3]}" \
  -i "${ALAC_FILES[4]}" \
  -i "${ALAC_FILES[5]}" \
  -i "${ALAC_FILES[6]}" \
  -map 5:a -map 2:a -map 4:a -map 3:a -map 1:a -map 0:a \
  -c copy \
  -disposition:a:0 default \
  -disposition:a:1 0 -disposition:a:2 0 -disposition:a:3 0 \
  -disposition:a:4 0 -disposition:a:5 0 \
  -metadata title="virtualdj" \
  -metadata artist="output" \
  "$temp_m4a" || die "Mux failed"

# Add track names and metadata
print "Finalizing..."
output="$FOLDER/$(basename "$FOLDER")-alac.m4a"

# Create metadata file with exact format
meta="$tmpdir/meta.txt"
cat > "$meta" <<EOF
tool=VirtualDJ 2023.7544
created=0
tempo=127
INITIALKEY=F
rate=0
EOF

# Apply metadata and track names
print "Applying metadata..."
# Note: MP4Box track numbers are 1-based, TRACK_NAMES array is 1-based in zsh
MP4Box \
  -udta "1:type=name" -udta "1:type=name:str=${TRACK_NAMES[1]}" \
  -udta "2:type=name" -udta "2:type=name:str=${TRACK_NAMES[2]}" \
  -udta "3:type=name" -udta "3:type=name:str=${TRACK_NAMES[3]}" \
  -udta "4:type=name" -udta "4:type=name:str=${TRACK_NAMES[4]}" \
  -udta "5:type=name" -udta "5:type=name:str=${TRACK_NAMES[5]}" \
  -udta "6:type=name" -udta "6:type=name:str=${TRACK_NAMES[6]}" \
  -itags "$meta" \
  -brand isom:512 -rb mp42 -ab mp41 \
  -flat -out "$output" "$temp_m4a" 2>&1 | grep -v "Setting up" | grep -v "Flat storage" | grep -v "Unrecognize tag" || true

print "✓ Created: $output"

# Debug: verify structure
print "\nVerifying stem file structure:"
track_count="$(ffprobe -v error -show_streams -select_streams a "$output" 2>/dev/null | grep -c "index=")"
if [[ "$track_count" -eq 6 ]]; then
  print "✓ 6 audio tracks found (ALAC lossless)"
  
  # Check codec
  codec="$(ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$output" 2>/dev/null)"
  [[ "$codec" == "alac" ]] && print "✓ ALAC codec confirmed"
  
  # Check for udta atoms if we have mp4info or MP4Box
  if command -v MP4Box >/dev/null 2>&1; then
    MP4Box -info "$output" 2>&1 | grep -q "udta" && print "✓ Track metadata (udta) present"
  fi
  
  print "\nFile should be recognized by VirtualDJ as a lossless stem file."
else
  print "⚠ Warning: Expected 6 tracks, found $track_count"
  print "File may not be recognized as a stem file."
fi
