#!/usr/bin/env zsh
# VirtualDJ stem packer for macOS
# Dependencies: ffmpeg, MP4Box (gpac)

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
RESET='\033[0m'

# VirtualDJ track order (do not change)
TRACK_NAMES=("mixed track" "vocal" "hihat" "bass" "instruments" "kick")

# Required input stems
STEMS=("kick" "instruments" "vocal" "bass" "hihat")

# Hihat can fall back to kick/drums if not found
HIHAT_OPTIONAL=true

# Default codec
CODEC="aac"
CODEC_EXT="aac"
CODEC_OPTS=("-c:a" "aac" "-b:a" "320k")

# Mode: auto-detect by default
MODE="auto"

usage() {
  cat <<EOF
${BOLD}VirtualDJ Stem Packer${RESET}
Package individual stem WAV files into a VirtualDJ-compatible multi-track M4A.

${BOLD}USAGE:${RESET}
  $(basename "$0") [OPTIONS] <stem_directory>

${BOLD}OPTIONS:${RESET}
  -l, --lossless    Use ALAC lossless encoding (default: AAC 320k)
  -s, --standalone  Force standalone mode (requires mixed.wav)
  -c, --sidecar     Force sidecar mode (creates mixed track from stems)
  -h, --help        Show this help message

${BOLD}MODES:${RESET}
  ${BOLD}Standalone${RESET} - Uses existing mixed.wav as the master track
             Auto-selected if mixed.wav or "mixed track.wav" is present
             Output: <name>-stems.m4a
  
  ${BOLD}Sidecar${RESET}    - Creates mixed track by combining all stems
             Auto-selected if no mixed.wav is found
             Output: <name>-custom.m4a (AAC) or <name>-lossless.m4a (ALAC)

${BOLD}REQUIRED STEMS:${RESET}
  The stem directory must contain WAV files for:
    • kick (or drums.wav, drums-main.wav)
    • instruments (or other.wav)
    • vocal (or vocals.wav)
    • bass (or bass.wav)
    • hihat (or drums-hihats.wav, hihats.wav) - optional, will use kick/drums if missing
  
  ${BOLD}+ For standalone mode:${RESET}
    • mixed.wav (or "mixed track.wav")

  ${BOLD}Common 4-stem format (Demucs, Spleeter):${RESET}
    • bass.wav → bass
    • drums.wav → kick + hihat
    • other.wav → instruments
    • vocals.wav → vocal

${BOLD}DEPENDENCIES:${RESET}
  • ffmpeg
  • MP4Box (gpac)

${BOLD}EXAMPLES:${RESET}
  $(basename "$0") ~/Music/MySong/stems              # Auto-detect mode
  $(basename "$0") -l ~/Music/MySong/stems           # ALAC lossless
  $(basename "$0") --standalone ~/Music/MySong/stems # Force standalone
  $(basename "$0") --sidecar ~/Music/MySong/stems    # Force sidecar

EOF
  exit 0
}

info() { print -P "%F{blue}→%f $*"; }
success() { print -P "%F{green}✓%f $*"; }
warn() { print -P "%F{yellow}⚠%f $*" >&2; }
error() { print -P "%F{red}✗%f $*" >&2; }
die() { error "$*"; exit 1; }

# Parse options
while [[ $# -gt 0 ]]; do
  case "$1" in
    -l|--lossless)
      CODEC="alac"
      CODEC_EXT="m4a"
      CODEC_OPTS=("-c:a" "alac" "-sample_fmt" "s16p")
      shift
      ;;
    -s|--standalone)
      MODE="standalone"
      shift
      ;;
    -c|--sidecar)
      MODE="sidecar"
      shift
      ;;
    -h|--help)
      usage
      ;;
    -*)
      die "Unknown option: $1 (use -h for help)"
      ;;
    *)
      break
      ;;
  esac
done

# Check dependencies
command -v ffmpeg >/dev/null 2>&1 || die "ffmpeg not found (install via: brew install ffmpeg)"
command -v MP4Box >/dev/null 2>&1 || die "MP4Box not found (install via: brew install gpac)"

[[ $# -eq 1 ]] || { error "Missing stem directory"; print "Use -h for help"; exit 2; }

FOLDER="$(cd "$1" 2>/dev/null && pwd)" || die "Cannot access directory: $1"
[[ -d "$FOLDER" ]] || die "Not a directory: $FOLDER"

print -P "\n%F{cyan}%B━━━ VirtualDJ Stem Packer ━━━%b%f\n"

# Create temp workspace
tmpdir="$(mktemp -d)"
trap "rm -rf '$tmpdir'" EXIT

# Find mixed track for standalone mode
find_mixed() {
  local f
  for f in "$FOLDER/mixed.wav" "$FOLDER/mixed track.wav" "$FOLDER/Mixed.wav" "$FOLDER/Mixed Track.wav"; do
    [[ -f "$f" ]] && { print "$f"; return 0; }
  done
  return 1
}

# Auto-detect mode if not forced
if [[ "$MODE" == "auto" ]]; then
  if find_mixed >/dev/null; then
    MODE="standalone"
  else
    MODE="sidecar"
  fi
fi

# Validate mode requirements
if [[ "$MODE" == "standalone" ]]; then
  MIXED_FILE="$(find_mixed)" || die "Standalone mode requires mixed.wav or 'mixed track.wav'"
  print -P "%F{cyan}Mode:%f %BStandalone%b %F{244}(using existing mixed track)%f"
else
  print -P "%F{cyan}Mode:%f %BSidecar%b %F{244}(will create mixed track from stems)%f"
fi

# Find input files
find_stem() {
  local stem="$1"
  local f
  
  # Direct match
  [[ -f "$FOLDER/${stem}.wav" ]] && { print "$FOLDER/${stem}.wav"; return; }
  
  # Common aliases
  case "$stem" in
    kick)        for f in "$FOLDER"/drums.wav "$FOLDER"/drums-main.wav "$FOLDER"/kick.wav; do
                   [[ -f "$f" ]] && { print "$f"; return; }
                 done ;;
    hihat)       for f in "$FOLDER"/drums-hihats.wav "$FOLDER"/hihat.wav "$FOLDER"/hihats.wav; do
                   [[ -f "$f" ]] && { print "$f"; return; }
                 done ;;
    instruments) for f in "$FOLDER"/other.wav "$FOLDER"/instruments.wav; do
                   [[ -f "$f" ]] && { print "$f"; return; }
                 done ;;
    vocal)       for f in "$FOLDER"/vocals.wav "$FOLDER"/vocal.wav; do
                   [[ -f "$f" ]] && { print "$f"; return; }
                 done ;;
    bass)        [[ -f "$FOLDER"/bass.wav ]] && { print "$FOLDER/bass.wav"; return; } ;;
  esac
  
  # Case-insensitive fallback
  for f in "$FOLDER"/*.wav; do
    [[ -f "$f" ]] || continue
    local name="$(basename "${f%.wav}" | tr '[:upper:]' '[:lower:]')"
    [[ "$name" == "$stem" ]] && { print "$f"; return; }
  done
  
  return 1
}

# Collect input files
info "\nLocating stem files..."
INPUT_FILES=()
KICK_FILE=""
for stem in "${STEMS[@]}"; do
  if [[ "$stem" == "hihat" ]] && [[ "$HIHAT_OPTIONAL" == "true" ]]; then
    # Try to find hihat, but if not found, we'll use kick later
    if f="$(find_stem "$stem")"; then
      INPUT_FILES+=("$f")
      print -P "  %F{green}✓%f %-12s %F{244}%s%f" "$stem" "$(basename "$f")"
    else
      # Will use kick file as fallback
      INPUT_FILES+=("__FALLBACK__")
      print -P "  %F{yellow}⚠%f %-12s %F{244}using drums/kick as fallback%f" "$stem"
    fi
  else
    f="$(find_stem "$stem")" || die "Missing stem: $stem.wav"
    INPUT_FILES+=("$f")
    print -P "  %F{green}✓%f %-12s %F{244}%s%f" "$stem" "$(basename "$f")"
    
    # Store kick file for potential hihat fallback
    [[ "$stem" == "kick" ]] && KICK_FILE="$f"
  fi
done

# Replace hihat fallback with kick file
for i in {1..${#INPUT_FILES[@]}}; do
  if [[ "${INPUT_FILES[$i]}" == "__FALLBACK__" ]]; then
    INPUT_FILES[$i]="$KICK_FILE"
  fi
done

if [[ "$MODE" == "standalone" ]]; then
  print -P "  %F{green}✓%f %-12s %F{244}%s%f" "mixed" "$(basename "$MIXED_FILE")"
fi

print -P "\n%F{cyan}Codec:%f %B${(U)CODEC}%b"
[[ "$CODEC" == "alac" ]] && print -P "%F{244}  Lossless encoding enabled%f"

# Handle mixed track based on mode
if [[ "$MODE" == "standalone" ]]; then
  info "\nUsing existing mixed track..."
  mixed_wav="$MIXED_FILE"
  success "Standalone mixed track ready"
else
  info "\nCreating mixed track from stems..."
  mixed_wav="$tmpdir/mixed.wav"
  ffmpeg -y -loglevel error \
    -i "${INPUT_FILES[1]}" \
    -i "${INPUT_FILES[2]}" \
    -i "${INPUT_FILES[3]}" \
    -i "${INPUT_FILES[4]}" \
    -i "${INPUT_FILES[5]}" \
    -filter_complex "amix=inputs=5,volume=5" \
    "$mixed_wav" || die "Mix failed"
  success "Sidecar mixed track created"
fi

# Encode all tracks
info "\nEncoding $CODEC tracks..."
ENCODED_FILES=()
i=1
for stem in "${STEMS[@]}"; do
  dst="$tmpdir/$stem.$CODEC_EXT"
  ffmpeg -y -loglevel error -i "${INPUT_FILES[$i]}" -vn "${CODEC_OPTS[@]}" "$dst" || die "Encode failed: $stem"
  ENCODED_FILES+=("$dst")
  print -P "  %F{green}✓%f $stem.$CODEC_EXT"
  ((i++))
done

# Encode mixed track
dst="$tmpdir/mixed.$CODEC_EXT"
ffmpeg -y -loglevel error -i "$mixed_wav" -vn "${CODEC_OPTS[@]}" "$dst" || die "Encode failed: mixed"
ENCODED_FILES+=("$dst")
print -P "  %F{green}✓%f mixed.$CODEC_EXT"

# Mux with correct stream order
info "\nMuxing M4A container..."
temp_m4a="$tmpdir/temp.m4a"

ffmpeg -y -loglevel error \
  -i "${ENCODED_FILES[1]}" \
  -i "${ENCODED_FILES[2]}" \
  -i "${ENCODED_FILES[3]}" \
  -i "${ENCODED_FILES[4]}" \
  -i "${ENCODED_FILES[5]}" \
  -i "${ENCODED_FILES[6]}" \
  -map 5:a -map 2:a -map 4:a -map 3:a -map 1:a -map 0:a \
  -c copy \
  -disposition:a:0 default \
  -disposition:a:1 0 -disposition:a:2 0 -disposition:a:3 0 \
  -disposition:a:4 0 -disposition:a:5 0 \
  -metadata title="virtualdj" \
  -metadata artist="output" \
  "$temp_m4a" || die "Mux failed"
success "Tracks muxed (order: mixed → vocal → hihat → bass → instruments → kick)"

# Finalize
info "\nApplying VirtualDJ metadata..."

# Determine output filename based on mode
if [[ "$MODE" == "standalone" ]]; then
  suffix="stems"
else
  suffix="$([[ "$CODEC" == "alac" ]] && print "lossless" || print "custom")"
fi
output="$FOLDER/$(basename "$FOLDER")-$suffix.m4a"

# Create metadata file
meta="$tmpdir/meta.txt"
cat > "$meta" <<EOF
tool=VirtualDJ 2023.7544
created=0
tempo=127
INITIALKEY=F
rate=0
EOF

# Apply metadata and track names
MP4Box \
  -udta "1:type=name" -udta "1:type=name:str=${TRACK_NAMES[1]}" \
  -udta "2:type=name" -udta "2:type=name:str=${TRACK_NAMES[2]}" \
  -udta "3:type=name" -udta "3:type=name:str=${TRACK_NAMES[3]}" \
  -udta "4:type=name" -udta "4:type=name:str=${TRACK_NAMES[4]}" \
  -udta "5:type=name" -udta "5:type=name:str=${TRACK_NAMES[5]}" \
  -udta "6:type=name" -udta "6:type=name:str=${TRACK_NAMES[6]}" \
  -itags "$meta" \
  -brand isom:512 -rb mp42 -ab mp41 \
  -flat -out "$output" "$temp_m4a" 2>&1 | grep -v "Setting up" | grep -v "Flat storage" | grep -v "Unrecognize tag" || true

success "Track names applied"

# Verify structure
info "\nVerifying output..."
track_count="$(ffprobe -v error -show_streams -select_streams a "$output" 2>/dev/null | grep -c "index=")"
if [[ "$track_count" -eq 6 ]]; then
  success "6 audio tracks detected"
  
  if command -v MP4Box >/dev/null 2>&1; then
    MP4Box -info "$output" 2>&1 | grep -q "udta" && success "Track metadata (udta) present"
  fi
  
  print -P "\n%F{cyan}%B━━━━━━━━━━━━━━━━━━━━━━━━━━━━%b%f"
  print -P "%F{green}%B✓ Success!%b%f\n"
  print -P "Mode:   %F{cyan}%B${(U)MODE}%b%f"
  print -P "Output: %F{cyan}%U$(basename "$output")%u%f"
  print -P "Size:   %F{244}$(du -h "$output" | cut -f1)%f"
  print -P "\n%F{244}File should be recognized by VirtualDJ as a stem file.%f\n"
else
  warn "Expected 6 tracks, found $track_count"
  print -P "%F{244}File may not be recognized as a stem file.%f\n"
fi
