#!/bin/bash

# dotfiles-sync.sh - Automate syncing dotfiles repository across computers
#
# This script:
# 1. Pulls the latest changes from remote
# 2. Detects if there are any local changes
# 3. Adds all changes, commits with an automated message, and pushes to remote
# 4. Reports the sync status

set -e # Exit on error

# Configuration
if [[ -z "$DOTFILES_DIR" ]]; then
  echo -e "\033[0;31mError: DOTFILES_DIR is not set.\033[0m"
  exit 1
fi

REMOTE="origin"
BRANCH="master"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Move to dotfiles directory
echo -e "${BLUE}Changing to dotfiles directory: $DOTFILES_DIR${NC}"
cd "$DOTFILES_DIR" || {
  echo -e "${RED}Error: Cannot change to $DOTFILES_DIR${NC}"
  exit 1
}

# Ensure this is a git repository
if [ ! -d ".git" ]; then
  echo -e "${RED}Error: $DOTFILES_DIR is not a git repository.${NC}"
  exit 1
fi

# Get hostname for the commit message
HOSTNAME=$(uname -n)

# Fetch changes from remote
echo -e "${BLUE}Fetching changes from remote...${NC}"
git fetch $REMOTE $BRANCH || {
  echo -e "${RED}Error: Failed to fetch from remote.${NC}"
  exit 1
}

LOCAL=$(git rev-parse @)
REMOTE_HASH=$(git rev-parse "$REMOTE/$BRANCH")
BASE=$(git merge-base @ "$REMOTE/$BRANCH")

if [ "$LOCAL" = "$REMOTE_HASH" ]; then
  echo -e "${GREEN}Local repository is up to date.${NC}"
elif [ "$LOCAL" = "$BASE" ]; then
  echo -e "${YELLOW}Pulling latest changes from remote...${NC}"
  git pull --ff-only $REMOTE $BRANCH || {
    echo -e "${RED}Error: Failed to pull changes.${NC}"
    exit 1
  }
  echo -e "${GREEN}Successfully pulled changes.${NC}"
else
  echo -e "${YELLOW}Histories have diverged. Attempting to rebase...${NC}"
  git pull --rebase $REMOTE $BRANCH || {
    echo -e "${RED}Rebase failed. Resolve conflicts manually.${NC}"
    exit 1
  }
fi

# Ensure all changes are staged
if git status --porcelain | grep -q '^[ MADRCU]'; then
  echo -e "${YELLOW}Local changes detected. Staging all changes...${NC}"
  git add --all || {
    echo -e "${RED}Error: Failed to stage files.${NC}"
    exit 1
  }
  TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
  COMMIT_MSG="Auto-sync from $HOSTNAME on $TIMESTAMP"
  git commit -m "$COMMIT_MSG" || {
    echo -e "${RED}Error: Failed to commit changes.${NC}"
    exit 1
  }
  echo -e "${GREEN}Committed local changes.${NC}"
else
  echo -e "${GREEN}No changes to commit.${NC}"
fi

# Push changes safely
echo -e "${BLUE}Pushing changes to remote...${NC}"
git push --force-with-lease $REMOTE $BRANCH || {
  echo -e "${RED}Error: Failed to push changes.${NC}"
  exit 1
}

echo -e "${GREEN}Dotfiles sync completed successfully!${NC}"
