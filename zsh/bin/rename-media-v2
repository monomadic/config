#!/bin/zsh

# Load canonical Zsh colors
autoload -U colors && colors

# Video File Analyzer and Renamer
# Dependencies: ffprobe (part of ffmpeg)

# Default options
DRY_RUN=false

# NerdFonts icons
ICON_VIDEO="󰎈"
ICON_OK=""
ICON_WARN=""

# Colors
GREEN="$fg[green]"
YELLOW="$fg[yellow]"
CYAN="$fg[cyan]"
RESET="$reset_color"

# Parse command line options
while [[ $# -gt 0 ]]; do
  case "$1" in
  --dry-run)
    DRY_RUN=true
    shift
    ;;
  -h | --help)
    echo -e "Usage: $0 [OPTIONS] video_file [video_file ...]\n"
    echo "Options:"
    echo "  --dry-run    Show what would be done without renaming"
    echo "  -h, --help   Show this message"
    exit 1
    ;;
  -*)
    echo -e "${YELLOW}${ICON_WARN} Unknown option: $1${RESET}"
    exit 1
    ;;
  *)
    break
    ;;
  esac
done

# Ensure ffprobe is available
if ! command -v ffprobe &>/dev/null; then
  echo -e "${YELLOW}${ICON_WARN} ffprobe is required but not installed.${RESET}"
  exit 1
fi

# Remove unwanted tags
clean_name() {
  local name="$1"
  # Remove resolution and fps tags
  name="${name//#4k/}"
  name="${name//#1080p/}"
  name="${name//#1080/}"
  name="${name//#720p/}"
  name="${name//#720/}"
  name="${name//#2160p/}"
  name="${name//#60fps/}"
  name="${name//#30fps/}"
  name="${name//#25fps/}"

  # Remove any text enclosed in braces, including the braces
  name=$(echo "$name" | sed -E 's/\{[^}]*\}//g')

  echo "$name"
}

# Process each video file
process_video() {
  local file="$1"
  local filename=$(basename "$file")
  local dirname=$(dirname "$file")
  local extension="${filename##*.}"
  local name_without_ext="${filename%.*}"
  name_without_ext=$(clean_name "$name_without_ext")

  # Get video metadata
  local video_info=$(ffprobe -v error -select_streams v:0 -show_entries \
    stream=width,height,r_frame_rate,bit_rate -of csv=p=0:s=, "$file")

  local width=$(echo $video_info | cut -d, -f1)
  local height=$(echo $video_info | cut -d, -f2)
  local frame_rate=$(echo $video_info | cut -d, -f3)
  local bit_rate=$(echo $video_info | cut -d, -f4)

  # Calculate frame rate
  if [[ $frame_rate == */* ]]; then
    local numerator=$(echo $frame_rate | cut -d/ -f1)
    local denominator=$(echo $frame_rate | cut -d/ -f2)
    frame_rate=$(((numerator + (denominator / 2)) / denominator))
  fi

  # Determine resolution
  local resolution=""
  if [[ $height -le 480 ]]; then
    resolution="480p"
  elif [[ $height -le 720 ]]; then
    resolution="720p"
  elif [[ $height -le 1080 ]]; then
    resolution="1080p"
  elif [[ $height -le 1440 ]]; then
    resolution="1440p"
  elif [[ $height -le 2160 ]]; then
    resolution="2160p"
  else
    resolution="${height}p"
  fi

  # Convert bitrate to Mbps
  local mbps="unknown"
  if [[ -n "$bit_rate" ]]; then
    mbps=$(printf "%.1f" $(echo "scale=1; $bit_rate / 1000000" | bc))
    mbps="${mbps}mbps"
  fi

  # Construct new filename
  local new_filename="${name_without_ext} {${resolution}@${frame_rate}fps, ${mbps}}.${extension}"
  local new_path="${dirname}/${new_filename}"

  # Rename file
  if [[ -f "$new_path" ]]; then
    echo -e "${YELLOW}${ICON_WARN} Exists: $new_filename${RESET}"
  else
    if [[ "$DRY_RUN" = true ]]; then
      echo -e "${CYAN}${ICON_VIDEO} ${new_filename}${RESET}"
    else
      mv "$file" "$new_path"
      echo -e "${GREEN}${ICON_OK} ${new_filename}${RESET}"
    fi
  fi
}

# Process files
for file in "$@"; do
  if [[ -f "$file" ]]; then
    case "${file:l}" in
    *.mp4 | *.mov | *.avi | *.mkv | *.wmv | *.flv | *.webm | *.m4v)
      process_video "$file"
      ;;
    esac
  fi
done
