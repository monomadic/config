#!/usr/bin/env bash
#set -euo pipefail
MPV_SOCKET="${MPV_SOCKET:-/tmp/mpv-socket}"

test_socket() {
    echo '{"command":["get_property","pid"]}' | socat - "$MPV_SOCKET" 2>/dev/null | grep -q "data"
}

ensure_mpv() {
    if [[ -S "$MPV_SOCKET" ]] && test_socket; then
        # valid socket
        return 0
    fi
    
    #[[ -S "$MPV_SOCKET" ]] && rm -f "$MPV_SOCKET"
    
    # echo "Starting mpv..." >&2
    # start mpv
    mpv --input-ipc-server="$MPV_SOCKET" --idle --force-window &
    
    for i in {1..50}; do
        if [[ -S "$MPV_SOCKET" ]] && test_socket; then
            return 0
        fi
        sleep 0.1
    done
    
    echo "Error: Failed to start mpv" >&2
    return 1
}

if [[ "${1:-}" == "--send" ]]; then
  ensure_mpv || exit 1

  # Build and send commands in one write
  {
    printf '{"command":["playlist-clear"]}\n'
    count=0
    while IFS= read -r file; do
      [[ -z "$file" ]] && continue
      # absolutize relative paths
      if [[ "$file" != /* ]]; then
        file="$(cd "$(dirname "$file")" && pwd)/$(basename "$file")"
      fi
      # JSON-escape via jq -Rs .
      jpath=$(printf '%s' "$file" | jq -Rs .)
      printf '{"command":["loadfile",%s,"append-play"]}\n' "$jpath"
      ((count++))
    done
    # optionally: bring to front after enqueues
    printf '{"command":["get_property","pid"]}\n'
  } | socat - "$MPV_SOCKET" >/tmp/mpv-ipc.out 2>/dev/null

  # bring mpv to front
  pid=$(echo '{"command":["get_property","pid"]}' | socat - "$MPV_SOCKET" | grep -o '"data":[0-9]*' | cut -d: -f2)
  [[ -n "$pid" ]] && osascript -e \
    "tell application \"System Events\" to set frontmost of first process whose unix id is $pid to true" \
    >/dev/null 2>&1 || true

  echo "Replaced playlist with $count file(s)" >&2
  exit 0
fi

fzf --read0 -m \
    --ansi \
    --exact --reverse --ansi --cycle --ignore-case \
    --delimiter=/ --with-nth=-1 \
    --no-sort \
    --bind "enter:select-all+execute-silent(printf '%s\n' {+} | MPV_SOCKET=$MPV_SOCKET $0 --send </dev/null)+deselect-all" \
    --bind "alt-enter:execute-silent(printf '%s\n' {+} | MPV_SOCKET=$MPV_SOCKET $0 --send </dev/null)+deselect-all" \
    --bind 'alt-r:execute(echo "exec: reveal {}" && reveal {})' \
    --bind 'alt-r:execute-silent(kitty @ launch --type=background --cwd=current open --reveal {})' \
    --bind 'alt-t:execute-silent(kitty @ launch --cwd "$(dirname {})")' \
    --bind 'ctrl-a:select-all' \
    --header 'ENTER: play all | ALT-ENTER: play one | CTRL-A: select all | TAB: toggle selection | ALT-R: reveal | ALT-T: term | ESC: quit' \
    "$@"
