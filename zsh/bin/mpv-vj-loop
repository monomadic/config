#!/usr/bin/env zsh

# mpv-vj-loop - VJ tool for playing short video clips with a configurable max duration
# Usage: ./mpv-vj-loop <max_duration> file1.mp4 file2.mp4 ...
#   or: ls **/*.mp4 | ./mpv-vj-loop <max_duration>

if [[ $# -lt 2 ]]; then
  echo "Error: Missing arguments."
  echo "Usage: $0 <max_duration> file1.mp4 file2.mp4 ..."
  echo "   or: ls *.mp4 | $0 <max_duration>"
  exit 1
fi

MAX_DURATION="$1"
shift # Remove first argument so the rest are file names

# Create temporary Lua script
TMP_SCRIPT=$(mktemp "${TMPDIR:-/tmp}/mpv_script_XXXXXX.lua")

cat >$TMP_SCRIPT <<EOL
local options = require 'mp.options'
local opt = { max_duration = tonumber("$MAX_DURATION") or 5 }
options.read_options(opt, "vjloop")

local timer = nil

function check_time()
    local time_pos = mp.get_property_number("time-pos", 0)
    if time_pos >= opt.max_duration then
        mp.commandv("playlist-next")
    end
end

function reveal_in_finder()
    local path = mp.get_property("path")
    if path then
        os.execute(string.format("open -R %q", path))
    end
end

function next_file()
    mp.commandv("playlist-next")
end

function on_file_loaded()
    -- Kill any existing timer
    if timer then
        timer:kill()
    end

    -- Start checking every 0.1s
    timer = mp.add_periodic_timer(0.1, check_time)
end

-- Key bindings
mp.add_key_binding("SPACE", "next-file", next_file, {repeatable=true})
mp.add_key_binding("ENTER", "next-file", next_file, {repeatable=true})
mp.add_key_binding("Meta+r", "reveal-in-finder", reveal_in_finder, {repeatable=true})

mp.register_event("file-loaded", on_file_loaded)
EOL

chmod +x "$TMP_SCRIPT"

# Ensure temporary script is cleaned up on exit
trap "rm -f $TMP_SCRIPT" EXIT INT TERM

echo "Starting MPV VJ Tool with max duration: $MAX_DURATION seconds"
echo "Using Lua script: $TMP_SCRIPT"

if [[ $# -gt 0 ]]; then
  echo "Playing $# files from arguments"
  mpv --no-config \
    "$@" \
    --no-native-fs \
    --fs \
    --loop-file=1 --length=10 \
    --shuffle \
    --mute=yes \
    --osd-level=0 \
    --force-window=yes \
    --script-opts=osc-visibility=never \
    --no-input-default-bindings \
    --input-conf=/dev/null
else
  if [[ -t 0 ]]; then
    echo "Error: No input files provided."
    exit 1
  else
    TMP_PLAYLIST=$(mktemp)
    trap "rm -f $TMP_SCRIPT $TMP_PLAYLIST" EXIT INT TERM
    cat >$TMP_PLAYLIST
    FILE_COUNT=$(wc -l <$TMP_PLAYLIST)
    echo "Playing $FILE_COUNT files from stdin"

    if [[ $FILE_COUNT -eq 0 ]]; then
      echo "Error: No files found in input"
      exit 1
    fi

    mpv --no-config --no-native-fs \
      --fs \
      --loop-file=1 --length=10 \
      --shuffle \
      --playlist=$TMP_PLAYLIST \
      --loop-playlist=inf \
      --loop-file=inf \
      --mute=yes \
      --osd-level=0 \
      --force-window=yes \
      --script-opts=osc-visibility=never \
      --no-input-default-bindings \
      --input-conf=/dev/null
  fi
fi
