#!/bin/sh
set -e

# ANSI color codes
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No color

# Function to print error and exit
error_exit() {
  printf "${RED}[error] %s${NC}\n" "$1"
  exit 1
}

# Check if a command is installed
check_command() {
  if ! command -v "$1" >/dev/null 2>&1; then
    error_exit "$1 is not installed. Please install it."
  fi
}

# Check dependencies
check_command "yt-dlp"
check_command "ffmpeg"
check_command "terminal-notifier"

# Function to print usage
print_usage() {
  cat <<EOF
Usage: $(basename "$0") <command> <URL>
Commands:
  music-video (m) <URL> - Download music video
  audio-only (a) <URL>  - Download audio only
  video-only (v) <URL>  - Download video without audio
  youtube (y) <URL>     - Download YouTube video
EOF
}

# Exit if arguments are missing
[ $# -ne 2 ] && print_usage && exit 1

COMMAND="$1"
URL="$2"

# Map command shortcuts
case "$COMMAND" in
  m) COMMAND="music-video" ;;
  a) COMMAND="audio-only" ;;
  v) COMMAND="video-only" ;;
  y) COMMAND="youtube" ;;
esac

# Base yt-dlp command
YT_DLP_BASE=(yt-dlp --cookies-from-browser brave --continue --progress --verbose \
  --retries infinite --fragment-retries infinite --socket-timeout 15)

# Initialize variables for different commands
case "$COMMAND" in
  "music-video"|"youtube")
    OUTPUT_TEMPLATE="%(title)s.%(ext)s"
    FORMAT_ARGS=(-f "bestvideo+bestaudio/best" --embed-metadata --embed-subs --embed-chapters)
    ;;
  "audio-only")
    OUTPUT_TEMPLATE="%(title)s.%(ext)s"
    FORMAT_ARGS=(-f "bestaudio" --extract-audio --audio-format m4a --embed-metadata)
    ;;
  "video-only")
    OUTPUT_TEMPLATE="%(title)s.%(ext)s"
    FORMAT_ARGS=(-f "bestvideo" --embed-metadata)
    ;;
  *)
    error_exit "Unknown command '$COMMAND'"
    ;;
esac

# Combine yt-dlp command
YT_DLP_CMD=("${YT_DLP_BASE[@]}" "${FORMAT_ARGS[@]}" --output "$OUTPUT_TEMPLATE")

# Check available formats
printf "${YELLOW}Checking available formats...${NC}\n"
FORMATS=$(yt-dlp -F "$URL")

# Determine if a WebM is better than MP4
WEBM_FORMAT=$(echo "$FORMATS" | rg -o '^[0-9]+.*webm.*[0-9]{4,}' | head -n 1 | awk '{print $1}')
MP4_FORMAT=$(echo "$FORMATS" | rg -o '^[0-9]+.*mp4.*[0-9]{4,}' | head -n 1 | awk '{print $1}')

if [ -n "$WEBM_FORMAT" ] && [ -n "$MP4_FORMAT" ]; then
  WEBM_RES=$(echo "$FORMATS" | rg "^$WEBM_FORMAT" | awk '{print $3}')
  MP4_RES=$(echo "$FORMATS" | rg "^$MP4_FORMAT" | awk '{print $3}')

  if [ "$WEBM_RES" -gt "$MP4_RES" ]; then
    printf "${YELLOW}Higher-quality WebM detected. Downloading WebM and converting to MP4...${NC}\n"
    yt-dlp -f "$WEBM_FORMAT+bestaudio" --output "$OUTPUT_TEMPLATE" "$URL"
    WEBM_FILE=$(ls | rg '\.webm$' | head -n 1)
    [ -n "$WEBM_FILE" ] || error_exit "WebM download failed."

    MP4_FILE="${WEBM_FILE%.webm}.mp4"
    ffmpeg -i "$WEBM_FILE" -c:v libx264 -c:a aac "$MP4_FILE"

    printf "${GREEN}Conversion complete. MP4 saved as: ${MP4_FILE}${NC}\n"
  else
    printf "${YELLOW}MP4 is the highest quality available. Downloading MP4...${NC}\n"
    yt-dlp -f "$MP4_FORMAT+bestaudio" --output "$OUTPUT_TEMPLATE" "$URL"
  fi
else
  printf "${YELLOW}Defaulting to best available format...${NC}\n"
  "${YT_DLP_CMD[@]}" "$URL"
fi

# Notify user
terminal-notifier -message "Download completed successfully." \
  -title "yt-dlp Download" \
  -execute "open ."

printf "${GREEN}Download process completed.${NC}\n"
