#!/usr/bin/env sh

usage() {
  echo "Usage: $0 [--match PATTERN] [--sort SORT_OPTION] [--reverse] [--verbose] [DIRECTORY...]" >&2
  echo "Purpose: accepts a list of paths as input (stdin or arguments) and recursively sorts all files across them."
  echo
  echo "If no DIRECTORYs are provided, reads directories from stdin." >&2
  echo
  echo "Options:" >&2
  echo " --match PATTERN Only list files matching the given pattern" >&2
  echo " --sort SORT_OPTION Sort files by the given option (modified, size, name)" >&2
  echo " --reverse Reverse the sort order and the final list" >&2
  echo " --verbose Enable verbose logging" >&2
}

verbose=false
log_verbose() {
  if $verbose; then
    echo "[DEBUG] $1" >&2
  fi
}

match_pattern=""
sort_option=""
reverse=false
input_dirs=""

while [ $# -gt 0 ]; do
  case $1 in
  --match)
    match_pattern="$2"
    shift 2
    ;;
  --sort)
    sort_option="$2"
    shift 2
    ;;
  --reverse)
    reverse=true
    shift
    ;;
  --verbose)
    verbose=true
    shift
    ;;
  *)
    input_dirs="$input_dirs$1\n"
    shift
    ;;
  esac
done

process_input_fd() {
  local dir="$1"
  log_verbose "Processing input with fd-video in directory: $dir"
  # Build fd options
  local fd_opts="-t f"
  [ -n "$match_pattern" ] && fd_opts="$fd_opts -g '$match_pattern'"
  # Navigate to the target directory
  cd "$dir" || {
    log_verbose "Failed to change to directory: $dir"
    return 1
  }
  log_verbose "Executing in $dir: fd-video $fd_opts"
  # Execute fd and apply sorting logic if needed
  if [ -n "$sort_option" ]; then
    case "$sort_option" in
    modified) fd-video $fd_opts -0 | xargs -0 stat -f "%m %N" | sort -n | cut -d' ' -f2- ;;
    size) fd-video $fd_opts -0 | xargs -0 stat -f "%z %N" | sort -n | cut -d' ' -f2- ;;
    name) fd-video $fd_opts | sort ;;
    esac
  else
    fd-video $fd_opts
  fi | while IFS= read -r file; do
    printf '%s/%s\n' "$dir" "$file"
  done
}

# Read directories from arguments or stdin
if [ -z "$input_dirs" ]; then
  while IFS= read -r line; do
    input_dirs="$input_dirs$line\n"
  done
fi

# Temporary file to store all results
temp_file=$(mktemp)

# Process each directory
printf "%b" "$input_dirs" | while IFS= read -r dir; do
  [ -z "$dir" ] && continue
  log_verbose "Searching directory: $dir"
  if [ ! -d "$dir" ]; then
    log_verbose "Skipping non-existent or non-directory: $dir"
    continue
  fi
  if [ ! -r "$dir" ]; then
    log_verbose "Cannot read directory $dir (permission denied)"
    continue
  fi
  process_input_fd "$dir" >>"$temp_file"
done

# Reverse the entire list if --reverse option is used
if $reverse; then
  tac "$temp_file"
else
  cat "$temp_file"
fi

rm "$temp_file"
log_verbose "Script execution completed"
