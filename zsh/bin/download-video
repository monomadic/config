#!/bin/sh

# Exit immediately if a command exits with a non-zero status
set -e

# Check if yt-dlp is installed
if ! command -v yt-dlp >/dev/null 2>&1; then
  echo "Error: yt-dlp is not installed. Please install yt-dlp."
  exit 1
fi

# Check if terminal-notifier is installed
if ! command -v terminal-notifier >/dev/null 2>&1; then
  echo "Error: terminal-notifier is not installed. Please install it using 'brew install terminal-notifier'."
  exit 1
fi

# Function to print usage
print_usage() {
  echo "Usage: $(basename "$0") <command> <URL>"
  echo "Commands:"
  echo "  music-video <URL> - Download music video"
  echo "  audio-only <URL>  - Download audio only"
  echo "  video-only <URL>  - Download video without audio"
  echo "  porn <URL>        - Download adult content"
  echo "  youtube <URL>     - Download YouTube video"
}

# Check if correct number of arguments is provided
if [ $# -ne 2 ]; then
  print_usage
  exit 1
fi

COMMAND="$1"
URL="$2"

# Base yt-dlp command with Brave browser cookies
YT_DLP_BASE="yt-dlp --cookies-from-browser brave --continue --print '%(filepath)s'"

# Initialize OUTPUT_TEMPLATE and other variables
OUTPUT_TEMPLATE=""
FORMAT_ARGS=()

case "$COMMAND" in
"porn")
  OUTPUT_TEMPLATE="[%(uploader|Unknown)s] %(title)s [%(extractor)s].%(ext)s"
  FORMAT_ARGS=(-f "bestvideo[ext=mp4][vcodec^=avc1]+bestaudio[ext=m4a]/best[ext=mp4]/best" \
              --merge-output-format mp4 \
              --embed-metadata \
              --embed-thumbnail \
              --embed-info-json \
              --match-filter "duration > 60" \
              --embed-subs \
              --embed-chapters)
  ;;
"music-video")
  OUTPUT_TEMPLATE="%(artist|)s - %(title)s.%(ext)s"
  FORMAT_ARGS=(-f "bestvideo[ext=mp4][vcodec^=avc1]+bestaudio[ext=m4a]/best[ext=mp4]/best" \
              --merge-output-format mp4 \
              --embed-metadata \
              --embed-thumbnail \
              --embed-subs \
              --embed-chapters)
  ;;
"audio-only")
  OUTPUT_TEMPLATE="%(artist)s - %(title)s.%(ext)s"
  FORMAT_ARGS=(-f "bestaudio[ext=m4a]/bestaudio" \
              --extract-audio \
              --audio-format m4a \
              --embed-metadata \
              --embed-thumbnail)
  ;;
"video-only")
  OUTPUT_TEMPLATE="%(artist)s - %(title)s.%(ext)s"
  FORMAT_ARGS=(-f "bestvideo[ext=mp4][vcodec^=avc1]" \
              --embed-metadata \
              --embed-thumbnail)
  ;;
"youtube")
  OUTPUT_TEMPLATE="[%(channel)s] %(title)s [youtube].%(ext)s"
  FORMAT_ARGS=(-f "bestvideo[ext=mp4][vcodec^=avc1]+bestaudio[ext=m4a]/best[ext=mp4]/best" \
              --merge-output-format mp4 \
              --embed-metadata \
              --embed-thumbnail \
              --embed-subs \
              --embed-chapters)
  ;;
*)
  printf "Error: Unknown command '%s'\n" "$COMMAND"
  print_usage
  exit 1
  ;;
esac

# Combine yt-dlp base command with format arguments and output template
YT_DLP_CMD=("$YT_DLP_BASE" "${FORMAT_ARGS[@]}" --output "$OUTPUT_TEMPLATE")

# Execute yt-dlp and capture the file path
FILE_PATH=$("${YT_DLP_CMD[@]}" "$URL")

# Check if the download was successful and FILE_PATH is not empty
if [ $? -eq 0 ] && [ -n "$FILE_PATH" ]; then
  echo "Download completed successfully."
  # Use terminal-notifier to display a clickable notification
  terminal-notifier -title "yt-dlp Download" \
                    -message "Download completed successfully." \
                    -activate "Finder" \
                    -execute "open --reveal \"$FILE_PATH\""
else
  echo "Error: Download failed."
  exit 1
fi
