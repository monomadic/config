#!/bin/sh
set -e

# ANSI color codes
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No color

# Function to print error and exit
error_exit() {
  printf "${RED}[error] %s${NC}\n" "$1"
  exit 1
}

# Check if a command is installed
check_command() {
  if ! command -v "$1" >/dev/null 2>&1; then
    error_exit "$1 is not installed. Please install it."
  fi
}

# Check dependencies
check_command "yt-dlp"
check_command "terminal-notifier"

# Function to print usage
print_usage() {
  cat <<EOF
Usage: $(basename "$0") <command> <URL>
Commands:
  music-video (m) <URL> - Download music video
  audio-only (a) <URL>  - Download audio only
  video-only (v) <URL>  - Download video without audio
  porn (p) <URL>        - Download adult content
  youtube (y) <URL>     - Download YouTube video
EOF
}

# Exit if arguments are missing
[ $# -ne 2 ] && print_usage && exit 1

COMMAND="$1"
URL="$2"

# Map command shortcuts
case "$COMMAND" in
  m) COMMAND="music-video" ;;
  a) COMMAND="audio-only" ;;
  v) COMMAND="video-only" ;;
  p) COMMAND="porn" ;;
  y) COMMAND="youtube" ;;
esac

# Base yt-dlp command
YT_DLP_BASE=(yt-dlp --cookies-from-browser brave --continue --progress --verbose \
  --retries infinite --fragment-retries infinite --socket-timeout 15)

# Initialize variables for different commands
case "$COMMAND" in
  "porn")
    OUTPUT_TEMPLATE="[%(uploader|Unknown)s] %(title)s [%(extractor)s].%(ext)s"
    FORMAT_ARGS=(-f "bestvideo[ext=mp4][vcodec^=avc1]+bestaudio[ext=m4a]/best[ext=mp4]" \
      --merge-output-format mp4 --embed-metadata --embed-thumbnail --embed-info-json \
      --match-filter "duration > 60" --embed-subs --embed-chapters)
    ;;
  "music-video")
    OUTPUT_TEMPLATE="%(artist|)s - %(title)s.%(ext)s"
    FORMAT_ARGS=(-f "bestvideo[ext=mp4][vcodec^=avc1]+bestaudio[ext=m4a]" \
      --merge-output-format mp4 --embed-metadata --embed-thumbnail --embed-subs --embed-chapters)
    ;;
  "audio-only")
    OUTPUT_TEMPLATE="%(artist)s - %(title)s.%(ext)s"
    FORMAT_ARGS=(-f "bestaudio[ext=m4a]" --extract-audio --audio-format m4a \
      --embed-metadata --embed-thumbnail)
    ;;
  "video-only")
    OUTPUT_TEMPLATE="%(artist)s - %(title)s.%(ext)s"
    FORMAT_ARGS=(-f "bestvideo[ext=mp4][vcodec^=avc1]" --merge-output-format mp4 --embed-metadata --embed-thumbnail)
    ;;
  "youtube")
    OUTPUT_TEMPLATE="[%(channel)s] %(title)s [youtube].%(ext)s"
    FORMAT_ARGS=(-f "bestvideo[ext=mp4][vcodec^=avc1]+bestaudio[ext=m4a]" \
      --merge-output-format mp4 --embed-metadata --embed-thumbnail --embed-subs --embed-chapters)
    ;;
  *)
    error_exit "Unknown command '$COMMAND'"
    ;;
esac

# Combine yt-dlp command
YT_DLP_CMD=("${YT_DLP_BASE[@]}" "${FORMAT_ARGS[@]}" --output "$OUTPUT_TEMPLATE")

# Print command for debugging
printf "${GREEN}Executing command: %s %s${NC}\n" "${YT_DLP_CMD[*]@Q}" "$URL"

# Execute yt-dlp and extract file path
FILE_PATH=$("${YT_DLP_CMD[@]}" "$URL" | tee /dev/tty | rg --only-matching '\[download\] Destination: .*' | sed 's/\[download\] Destination: //')

# Check if the file was downloaded
[ -n "$FILE_PATH" ] && [ -f "$FILE_PATH" ] || error_exit "Download failed or file not found."

# Run media-autotag and update file path
printf "${YELLOW}Running media-autotag...${NC}\n"
media-autotag "$FILE_PATH"
NEW_FILE_PATH="$FILE_PATH"

# Notify user
terminal-notifier -message "Download and tagging completed successfully." \
  -title "yt-dlp Download and Tag" \
  -activate "com.apple.finder" \
  -execute "open --reveal \"$NEW_FILE_PATH\""

printf "${GREEN}New file path: %s${NC}\n" "$NEW_FILE_PATH"
