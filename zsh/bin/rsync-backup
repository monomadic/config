#!/bin/zsh

# Usage information
usage() {
  echo "Usage: $0 [--quiet] [--dry-run] [--log logfile] [--delete] <source> <destination> [filter_pattern]"
  exit 1
}

# Default options
quiet_mode=false
dry_run=false
logfile=""
delete_mode=false

# Parse options
while [[ "$1" =~ ^-- ]]; do
  case "$1" in
  --quiet)
    quiet_mode=true
    shift
    ;;
  --dry-run)
    dry_run=true
    shift
    ;;
  --log)
    logfile="$2"
    shift 2
    ;;
  --delete)
    delete_mode=true
    shift
    ;;
  *)
    echo "Unknown option: $1"
    usage
    ;;
  esac
done

# Ensure source and destination arguments are provided
if [ "$#" -lt 2 ]; then
  echo "Error: Missing source or destination."
  usage
fi

source_path="$1"
dest_path="$2"
filter_pattern="$3"

# Validate paths
for dir in "$source_path" "$dest_path"; do
  if [ ! -d "$dir" ]; then
    echo "Error: Directory '$dir' does not exist or is inaccessible."
    exit 1
  fi
done

# Rsync options
rsync_opts=(-av --prune-empty-dirs --exclude '*/.*' --stats --out-format='%n')
# '--stats' will show total bytes transferred and average speed
# '--out-format=%n' prints the relative filename being transferred.

if [ -n "$filter_pattern" ]; then
  rsync_opts+=(--include '*/' --include "*${filter_pattern}*" --exclude '*')
else
  rsync_opts+=(--include '*/' --include '*')
fi

$dry_run && rsync_opts+=(--dry-run)
$delete_mode && rsync_opts+=(--delete)

run_rsync() {
  rsync "${rsync_opts[@]}" "$source_path/" "$dest_path/"
}

if [ -n "$logfile" ]; then
  run_rsync >"$logfile" 2>&1
else
  run_rsync
fi

rsync_exit_code=$?

[ $rsync_exit_code -eq 0 ] && ! $quiet_mode && echo "Rsync completed successfully."
[ $rsync_exit_code -ne 0 ] && echo "Rsync encountered an error. Exit code: $rsync_exit_code"

exit $rsync_exit_code
#!/bin/zsh

# Usage information
usage() {
  echo "Usage: $0 [--quiet] [--dry-run] [--log logfile] [--delete] <source> <destination> [filter_pattern]"
  exit 1
}

# Default options
quiet_mode=false
dry_run=false
logfile=""
delete_mode=false

# Parse options
while [[ "$1" =~ ^-- ]]; do
  case "$1" in
    --quiet)  quiet_mode=true; shift ;;
    --dry-run) dry_run=true; shift ;;
    --log)    logfile="$2"; shift 2 ;;
    --delete) delete_mode=true; shift ;;
    *) echo "Unknown option: $1"; usage ;;
  esac
done

# Ensure source and destination arguments are provided
if [ "$#" -lt 2 ]; then
  echo "Error: Missing source or destination."
  usage
fi

source_path="$1"
dest_path="$2"
filter_pattern="$3"

# Validate paths
for d in "$source_path" "$dest_path"; do
  if [ ! -d "$d" ]; then
    echo "Error: Directory '$d' does not exist or is inaccessible."
    exit 1
  fi
done

# Base rsync options
rsync_opts=(-a --prune-empty-dirs --stats)

# Always exclude hidden files/dirs (dotfiles) at root and in subdirs
# Put excludes early so they take precedence over any later includes.
rsync_opts+=(--exclude '.*' --exclude '*/.*')

# Progress / verbosity
if $quiet_mode; then
  # Quiet: no verbose names, no progress chatter
  :
else
  # Human-readable sizes, filenames, and progress (overall + per-file)
  rsync_opts+=(-v --human-readable --info=progress2 --progress --out-format='%n')
fi

# Include/Exclude logic for optional filter pattern
if [ -n "$filter_pattern" ]; then
  # Traverse dirs but only copy entries matching the pattern; everything else excluded.
  rsync_opts+=(--include '*/' --include "*${filter_pattern}*" --exclude '*')
else
  # Default: copy everything (except hidden due to excludes above)
  rsync_opts+=(--include '*/' --include '*')
fi

$dry_run && rsync_opts+=(--dry-run)
$delete_mode && rsync_opts+=(--delete)

run_rsync() {
  rsync "${rsync_opts[@]}" "$source_path/" "$dest_path/"
}

if [ -n "$logfile" ]; then
  # Capture both filename list and progress into the log
  run_rsync >"$logfile" 2>&1
else
  run_rsync
fi

rsync_exit_code=$?

if [ $rsync_exit_code -eq 0 ]; then
  $quiet_mode || echo "Rsync completed successfully."
else
  echo "Rsync encountered an error. Exit code: $rsync_exit_code"
fi

exit $rsync_exit_code
