#!/bin/zsh
set -euo pipefail

usage() {
  echo "Usage: $0 [--quiet] [--dry-run] [--log logfile] [--delete] [extra rsync flags…] <source> <dest> [filter_pattern]"
  exit 1
}

quiet_mode=false
dry_run=false
logfile=""
delete_mode=false
extra_opts=()

# Parse our wrapper flags; pass anything unknown to rsync
while [[ $# -gt 0 && "$1" == --* ]]; do
  case "$1" in
    --quiet)   quiet_mode=true; shift ;;
    --dry-run) dry_run=true; shift ;;
    --log)     [[ $# -ge 2 ]] || usage; logfile="$2"; shift 2 ;;
    --delete)  delete_mode=true; shift ;;
    --)        shift; break ;;             # explicit end of wrapper options
    *)         extra_opts+=("$1"); shift ;;# passthrough to rsync
  esac
done

[[ $# -lt 2 ]] && { echo "Error: Missing source or destination."; usage; }

src="$1"; dst="$2"; filter_pattern="${3:-}"

for d in "$src" "$dst"; do
  [[ -d "$d" ]] || { echo "Error: '$d' is not a directory or is inaccessible."; exit 1; }
done

# Prefer Homebrew rsync if available
if [[ -x /opt/homebrew/bin/rsync ]]; then
  RSYNC=/opt/homebrew/bin/rsync
else
  RSYNC=rsync
fi

# Detect modern rsync (>=3.1)
if $RSYNC --version | awk 'NR==1{split($3,v,"."); exit !((v[1]>3)|| (v[1]==3 && v[2]>=1))}'; then
  base_opts=(-aHAXx --numeric-ids)        # modern
  progress_opts=(--info=progress2 --stats)
else
  base_opts=(-aHx -E --numeric-ids)       # Apple rsync 2.6.x (no -A)
  progress_opts=(--progress)              # no progress2
fi

rsync_opts=("${base_opts[@]}" --prune-empty-dirs)

# … your excludes …
rsync_opts+=(
  --exclude='/.DS_Store' --exclude='/.Spotlight-V100' --exclude='/.Trashes'
  --exclude='/.fseventsd' --exclude='/.DocumentRevisions-V100' --exclude='/.TemporaryItems'
  --exclude='.*' --exclude='**/.*'
)

# verbosity
if ! $quiet_mode; then
  rsync_opts+=(-h --out-format='%n' "${progress_opts[@]}")
fi

# delete behavior (don’t use --delete-excluded on macOS volumes)
if $delete_mode; then
  rsync_opts+=(--delete --delete-during --force)
fi

# passthrough extras from user
rsync_opts+=("${extra_opts[@]}")

run_rsync() {
  # trailing slashes: copy contents of src into dst
  exec "$RSYNC" "${rsync_opts[@]}" "$src/" "$dst/"
}

if [[ -n "$logfile" ]]; then
  run_rsync >"$logfile" 2>&1
else
  run_rsync
fi
