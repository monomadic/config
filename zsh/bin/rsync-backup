#!/bin/zsh

usage() { echo "Usage: $0 [--quiet] [--dry-run] [--log logfile] [--delete] <source> <dest> [filter_pattern]"; exit 1; }

quiet_mode=false
dry_run=false
logfile=""
delete_mode=false

while [[ "$1" =~ ^-- ]]; do
  case "$1" in
    --quiet)  quiet_mode=true; shift ;;
    --dry-run) dry_run=true; shift ;;
    --log)    logfile="$2"; shift 2 ;;
    --delete) delete_mode=true; shift ;;
    *) echo "Unknown option: $1"; usage ;;
  esac
done

[[ $# -lt 2 ]] && { echo "Error: Missing source or destination."; usage; }

src="$1"
dst="$2"
filter_pattern="$3"

for d in "$src" "$dst"; do
  [[ -d "$d" ]] || { echo "Error: '$d' is not a directory or is inaccessible."; exit 1; }
done

# Base opts
rsync_opts=(-a --prune-empty-dirs --stats)

# Exclude ALL dotfiles & dot-directories at ANY depth (put BEFORE any includes)
# (covers .Trash, .Spotlight-V100, .DS_Store, etc.)
rsync_opts+=(--exclude='.*' --exclude='**/.*')

# Nice-to-have macOS noise blocks (redundant given above, but explicit is fine)
rsync_opts+=(--exclude='.DS_Store' --exclude='.Spotlight-V100' --exclude='.Trashes' --exclude='.fseventsd' --exclude='.DocumentRevisions-V100' --exclude='.TemporaryItems')  #  [oai_citation:1‡Stack Overflow](https://stackoverflow.com/questions/52568290/rsync-macos-operation-not-permitted-and-skipping-file-deletion?utm_source=chatgpt.com)

# Progress / verbosity
if ! $quiet_mode; then
  rsync_ver_ok() { rsync --version | awk 'NR==1{split($3,v,"."); exit !((v[1]>3) || (v[1]==3 && v[2]>=1))}'; }
  rsync_opts+=(-h --out-format='%n')
  if rsync_ver_ok; then
    rsync_opts+=(--info=progress --stats)   # overall % + MB/s + ETA (rsync ≥ 3.1)  [oai_citation:2‡Server Fault](https://serverfault.com/questions/607689/can-rsync-display-current-average-speed?utm_source=chatgpt.com)
  else
    rsync_opts+=(--progress)         # per-file fallback
    echo "Note: overall progress needs rsync ≥ 3.1; showing per-file progress." >&2
  fi
fi

# Optional pattern limiter
if [[ -n "$filter_pattern" ]]; then
  # Traverse dirs but only copy entries matching pattern; everything else excluded.
  # Excludes above still win (first match).  [oai_citation:3‡Super User](https://superuser.com/questions/803212/understanding-rsyncs-include-exclude-patterns?utm_source=chatgpt.com)
  rsync_opts+=(--include '*/' --include "*${filter_pattern}*" --exclude '*')
fi

$dry_run && rsync_opts+=(--dry-run)
$delete_mode && rsync_opts+=(--delete)

run_rsync() {
  rsync "${rsync_opts[@]}" "$src/" "$dst/"
}

if [[ -n "$logfile" ]]; then
  run_rsync >"$logfile" 2>&1
else
  run_rsync
fi

rc=$?
if (( rc == 0 )); then $quiet_mode || echo "Rsync completed successfully."; else echo "Rsync error: exit $rc"; fi
exit $rc
