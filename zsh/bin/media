#!/bin/zsh
# Simpler version of media tool that does not stream input from disk. Slower but more reliable.
#
# Function to print usage information
print_usage() {
  echo "Usage: media <command> [video-type] [args]"
  echo "Commands:"
  echo "  play   - Play videos"
  echo "  search - Search videos"
  echo "  list   - List videos"
  echo "Video types:"
  echo "  clips     - Match videos in '/clips/'"
  echo "  originals - Match videos in '/originals/'"
  echo "  library   - Match videos in '/clip-library/'"
  echo "  loops     - Match videos in '/loops/'"
  echo "  scenes    - Match videos in '/scenes/'"
  echo "Args:"
  echo "  #tag          - Match videos with '#tag'"
  echo "  [Tag]         - Match videos with '[Tag]'"
  echo "  --shuffle     - Shuffle videos during playback (only for 'play' command)"
  echo "  --start-random - Start playback from a random position in playlist"
  echo "  --verbose     - Enable verbose output"
}

# Initialize variables
command=""
video_type=""
base_command="ls-media"
additional_args=()
shuffle_enabled=false
start_random=false
verbose=false

# Parse command
if [[ $# -ge 1 ]]; then
  case $1 in
  play | search | list)
    command=$1
    shift
    ;;
  *)
    echo "Error: Invalid command"
    print_usage
    exit 1
    ;;
  esac
else
  echo "Error: Command is required"
  print_usage
  exit 1
fi

# Parse video type and args
while [[ $# -gt 0 ]]; do
  case $1 in
  clips)
    video_type="clips"
    additional_args+=("--match-string '/clips/'")
    shift
    ;;
  library)
    video_type="library"
    additional_args+=("--match-string '/clip-library/'")
    shift
    ;;
  top-clips)
    video_type="top-clips"
    additional_args+=("--match-regex 'clips.*#(suki\|top\|cumshot)'")
    shift
    ;;
  originals)
    video_type="originals"
    additional_args+=("--match-string '/originals/'")
    shift
    ;;
  loops)
    video_type="loops"
    additional_args+=("--match-string '/loops/'")
    shift
    ;;
  scenes)
    video_type="scenes"
    additional_args+=("--match-string '/scenes/'")
    shift
    ;;
  latest)
    additional_args+=("--sort-created --reverse")
    shift
    ;;
  --shuffle)
    shuffle_enabled=true
    shift
    ;;
  --start-random)
    start_random=true
    shift
    ;;
  --verbose)
    verbose=true
    shift
    ;;
  \#*)
    additional_args+=("--match-string '$1'")
    shift
    ;;
  \[*\])
    # Remove brackets and add as a match string
    tag="${1#\[}"
    tag="${tag%\]}"
    additional_args+=("--match-string '$tag'")
    shift
    ;;
  *)
    echo "Warning: Unrecognized argument '$1'"
    shift
    ;;
  esac
done

# Build the final command
final_command="$base_command ${additional_args[@]}"
case $command in
play)
  if [[ "$video_type" == "loops" ]]; then
    final_command+=" | tr '\0' '\n' | mpv-play --loop-mode 5" # Convert nulls to newlines for mpv
  else
    final_command+=" | tr '\0' '\n' | mpv-play" # Convert nulls to newlines for mpv
  fi
  if $shuffle_enabled; then
    final_command+=" --shuffle"
  fi
  if $start_random; then
    final_command+=" --start-random"
  fi
  ;;
search)
  final_command+=" | fzf-play" # No change needed if fzf-play already handles --read0
  ;;
list)
  final_command+=" | tr '\0' '\n'" # Convert nulls to newlines for normal output
  ;;
esac

# Execute the command with optional verbose output
if $verbose; then
  echo "Executing: $final_command"
fi
eval $final_command
