#!/bin/zsh

# Video File Analyzer and Renamer
# Dependencies: ffprobe (part of ffmpeg)

# Default options
DRY_RUN=false

# Function to display usage information
show_usage() {
  cat <<EOF
Usage: $0 [OPTIONS] video_file [video_file ...]

Analyzes video files and renames them to include resolution, frame rate, and bitrate.
New format: FILENAME {RESOLUTIONp@FPSfps, BITRATEmbps}.EXT

Options:
  --dry-run    Show what would be done without actually renaming files
  -h, --help   Display this help message and exit

Examples:
  $0 video.mp4
  $0 --dry-run *.mov
  $0 /path/to/videos/*.mkv

Dependencies:
  - ffprobe (part of ffmpeg)
EOF
  exit 1
}

# Parse command line options
while [[ $# -gt 0 ]]; do
  case "$1" in
  --dry-run)
    DRY_RUN=true
    shift
    ;;
  -h | --help)
    show_usage
    ;;
  -*)
    echo "Error: Unknown option: $1"
    show_usage
    ;;
  *)
    break
    ;;
  esac
done

# Check if any files were provided
if [[ $# -eq 0 ]]; then
  echo "Error: No input files specified."
  show_usage
fi

# Check if ffprobe is installed
if ! command -v ffprobe &>/dev/null; then
  echo "Error: ffprobe is required but not installed. Please install ffmpeg."
  exit 1
fi

# Function to process each video file
process_video() {
  local file="$1"
  local filename=$(basename "$file")
  local dirname=$(dirname "$file")
  local extension="${filename##*.}"
  local name_without_ext="${filename%.*}"

  echo "Processing: $filename"

  # Use ffprobe to get video information
  local video_info=$(ffprobe -v error -select_streams v:0 -show_entries \
    stream=width,height,r_frame_rate,bit_rate -of csv=p=0:s=, "$file")

  # Parse the video information
  local width=$(echo $video_info | cut -d, -f1)
  local height=$(echo $video_info | cut -d, -f2)
  local frame_rate=$(echo $video_info | cut -d, -f3)
  local bit_rate=$(echo $video_info | cut -d, -f4)

  # Calculate frame rate (may be in fraction form like 30000/1001)
  if [[ $frame_rate == */* ]]; then
    local numerator=$(echo $frame_rate | cut -d/ -f1)
    local denominator=$(echo $frame_rate | cut -d/ -f2)
    frame_rate=$(((numerator + (denominator / 2)) / denominator))
  fi

  # Determine resolution code
  local resolution=""
  if [[ $height -le 480 ]]; then
    resolution="480p"
  elif [[ $height -le 720 ]]; then
    resolution="720p"
  elif [[ $height -le 1080 ]]; then
    resolution="1080p"
  elif [[ $height -le 1440 ]]; then
    resolution="1440p"
  elif [[ $height -le 2160 ]]; then
    resolution="2160p"
  else
    resolution="${height}p"
  fi

  # Convert bitrate to mbps
  local mbps=""
  if [[ -z "$bit_rate" ]]; then
    mbps="unknown"
  else
    # Convert to Mbps with one decimal place
    mbps=$(printf "%.1f" $(echo "scale=1; $bit_rate / 1000000" | bc))
    mbps="${mbps}mbps"
  fi

  # Create new filename
  local new_filename="${name_without_ext} {${resolution}@${frame_rate}fps, ${mbps}}.${extension}"
  local new_path="${dirname}/${new_filename}"

  # Check if the new file already exists
  if [[ -f "$new_path" ]]; then
    echo "File already exists, skipping: $new_filename"
  else
    echo "Renaming to: $new_filename"
    if [[ "$DRY_RUN" = true ]]; then
      echo "[DRY RUN] Would rename: '$file' -> '$new_path'"
    else
      mv "$file" "$new_path"
    fi
  fi

  echo "-----------------------------------"
}

# Main script

# Process each file provided as an argument
for file in "$@"; do
  if [[ -f "$file" ]]; then
    # Check if it's a video file (simple extension check)
    case "${file:l}" in
    *.mp4 | *.mov | *.avi | *.mkv | *.wmv | *.flv | *.webm | *.m4v)
      process_video "$file"
      ;;
    *)
      echo "Skipping non-video file: $file"
      ;;
    esac
  else
    echo "File doesn't exist: $file"
  fi
done

if [[ "$DRY_RUN" = true ]]; then
  echo "All files processed (DRY RUN - no files were actually renamed)."
else
  echo "All files processed."
fi
