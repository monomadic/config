#!/bin/zsh

# Default: do not overwrite existing files
allow_overwrites=0

# Display usage information
function show_usage {
  echo "Usage: $0 [--allow-overwrites] <destination_directory>"
  echo
  echo "Options:"
  echo "  --allow-overwrites  Overwrite files in the destination directory if they already exist."
  echo
  echo "Description:"
  echo "  Copies files from a list provided via stdin to the specified destination directory."
  echo "  By default, existing files in the destination will not be overwritten."
  echo
  exit 1
}

# Check if no arguments are provided and show usage if so
if [[ $# -eq 0 ]]; then
  show_usage
fi

# Process options
while [[ $# -gt 0 ]]; do
  case "$1" in
  --allow-overwrites) # Allow overwriting existing files in the destination
    allow_overwrites=1
    shift
    ;;
  *)
    # Assume any non-option argument is the destination directory
    destination_dir="$1"
    shift
    ;;
  esac
done

# Check if destination directory is provided
if [[ -z "$destination_dir" ]]; then
  show_usage
fi

# Create the destination directory if it doesn't exist
mkdir -p "$destination_dir"

# Initialize an associative array to keep track of destination filenames
typeset -A dest_files

# Read file paths from stdin and store them in an array
file_paths=()
while IFS= read -r file_path || [[ -n "$file_path" ]]; do
  # Check if the file exists
  if [[ ! -f "$file_path" ]]; then
    echo "\nFile not found: $file_path"
    continue
  fi

  # Get the basename of the file
  filename=$(basename "$file_path")

  # Skip files that already exist in destination unless overwriting is allowed
  if [[ -f "$destination_dir/$filename" && $allow_overwrites -eq 0 ]]; then
    printf "\r\033[KSkipping (exists) %-60s" "$filename"
    continue
  fi

  dest_files[$filename]=1 # Mark the filename as used
  file_paths+=("$file_path")
done

# Copy files into the flat directory using rsync
for file_path in "${file_paths[@]}"; do
  filename=$(basename "$file_path")
  destination_file="$destination_dir/$filename"

  # Use rsync to copy the file, capturing output
  rsync_output=$(rsync -a --itemize-changes "$file_path" "$destination_file" 2>&1)

  # If rsync_output is non-empty, it means the file was copied or updated
  if [[ -n "$rsync_output" ]]; then
    # Display the filename on a single line
    printf "\r\033[KCopying %-60s" "$filename"
  fi
done

# Print the "done." message, overwriting the last progress message
printf "\r\033[Kdone.\n"
