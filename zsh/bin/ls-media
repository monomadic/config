#!/usr/bin/env zsh

usage() {
  echo "Usage: ${0:t} [--match-string STRING]... [--match-regex REGEX]... [--sort-modified | --sort-created] [--reverse] [--verbose]" >&2
}

verbose=false

log_verbose() {
	if $verbose; then
		echo "[DEBUG] $1" >&2
	fi
	return 0
}

match_strings=()
match_regexes=()
sort_modified=false
sort_created=false
reverse=false

# Parse command-line arguments
while [ $# -gt 0 ]; do
  case $1 in
  --match-string)
    match_strings+=("$2")
    shift 2
    ;;
  --match-regex)
    match_regexes+=("$2")
    shift 2
    ;;
  --sort-modified)
    sort_modified=true
    shift
    ;;
  --sort-created)
    sort_created=true
    shift
    ;;
  --reverse)
    reverse=true
    shift
    ;;
  --verbose)
    verbose=true
    shift
    ;;
  *)
    usage
    exit 1
    ;;
  esac
done

process_files() {
  local dir="$1"
  cd "$dir" || { log_verbose "Cannot access $dir"; return 1; }
  local fd_video_cmd=(fd-video -t f --full-path --ignore-case -0)
  log_verbose "Executing: ${fd_video_cmd[*]}"

  while IFS= read -r -d $'\0' file; do
    # Filter by match_strings and match_regexes in one loop
    local match=true
    for str in "${match_strings[@]}"; do
      [[ "${file:l}" != *"${str:l}"* ]] && match=false && break
    done
    if $match; then
      for regex in "${match_regexes[@]}"; do
        [[ ! "${file:l}" =~ "${regex:l}" ]] && match=false && break
      done
    fi
    if $match; then
      local full_path="$file"
      if $sort_modified; then
        ts=$(eza --no-filesize --no-permissions --time-style=long-iso --long "$full_path" | awk '{print $6, $7}')
        printf "%s\t%s\0" "$ts" "$full_path"
      elif $sort_created; then
        ts=$(eza --no-filesize --no-permissions --time-style=long-iso --sort=created --long "$full_path" | awk '{print $6, $7}')
        printf "%s\t%s\0" "$ts" "$full_path"
      else
        printf "%s\0" "$full_path"
      fi
    fi
  done < <("${fd_video_cmd[@]}")
}

# Get directories
directories=("${(@f)$(ls-media-paths)}")
(( ${#directories[@]} == 0 )) && echo "No directories found" >&2 && exit 1

# Process output based on sorting needs
if ! $sort_modified && ! $sort_created; then
  for dir in "${directories[@]}"; do
    [[ -d "$dir" && -r "$dir" ]] && process_files "$dir"
  done
else
  # For sorted output
  results=()
  for dir in "${directories[@]}"; do
    [[ -d "$dir" && -r "$dir" ]] && while IFS= read -r -d $'\0' line; do
      results+=("$line")
    done < <(process_files "$dir")
  done

  # Sort and output
  if $reverse; then
    printf '%s\0' "${(On)results[@]}"
  else
    printf '%s\0' "${results[@]}"
  fi
fi

log_verbose "Script execution completed"
