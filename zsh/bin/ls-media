#!/usr/bin/env zsh

usage() {
  echo "Usage: $0 [--match-string STRING]... [--match-regex REGEX]... [--sort-modified | --sort-created] [--reverse] [--verbose]" >&2
}

verbose=false

log_verbose() {
  $verbose && echo "[DEBUG] $1" >&2
}

match_strings=()
match_regexes=()
sort_modified=false
sort_created=false
reverse=false

# Parse command-line arguments
while [ $# -gt 0 ]; do
  case $1 in
  --match-string)
    match_strings+=("$2")
    shift 2
    ;;
  --match-regex)
    match_regexes+=("$2")
    shift 2
    ;;
  --sort-modified)
    sort_modified=true
    shift
    ;;
  --sort-created)
    sort_created=true
    shift
    ;;
  --reverse)
    reverse=true
    shift
    ;;
  --verbose)
    verbose=true
    shift
    ;;
  *)
    usage
    exit 1
    ;;
  esac
done

process_files() {
  local dir="$1"
  cd "$dir" || { log_verbose "Cannot access $dir"; return 1; }

  local fd_video_cmd=(fd-video -t f --full-path --ignore-case -0)
  log_verbose "Executing: ${fd_video_cmd[*]}"

  # Collect files into an array
  local files=()
  while IFS= read -r -d $'\0' file; do
    # Filter by match_strings and match_regexes in one loop
    local match=true
    for str in "${match_strings[@]}"; do
      [[ "${file:l}" != *"${str:l}"* ]] && match=false && break
    done
    if $match; then
      for regex in "${match_regexes[@]}"; do
        [[ ! "${file:l}" =~ "${regex:l}" ]] && match=false && break
      done
    fi
    $match && files+=("$file")
  done < <("${fd_video_cmd[@]}")

  # Process file times if sorting
  for file in "${files[@]}"; do
    local full_path="$PWD/$file"
    if $sort_modified; then
      eza --no-filesize --no-permissions --time-style=long-iso --long "$full_path" | \
      awk '{print $6 " " $7, full_path}' full_path="$full_path"
    elif $sort_created; then
      eza --no-filesize --no-permissions --time-style=long-iso --sort=created --long "$full_path" | \
      awk '{print $6 " " $7, full_path}' full_path="$full_path"
    else
      echo "$full_path"
    fi
  done
}

# Get directories
directories=("${(@f)$(ls-media-paths)}")
(( ${#directories[@]} == 0 )) && echo "No directories found" >&2 && exit 1

# Temporary array to store results for in-memory sorting
results=()
for dir in "${directories[@]}"; do
  [[ -d "$dir" && -r "$dir" ]] && results+=("$(process_files "$dir")")
done

# Sort in-memory
if $sort_modified || $sort_created; then
  sorted_results=$(printf "%s\n" "${results[@]}" | sort -n)
else
  sorted_results="${results[@]}"
fi

# Reverse if needed
if $reverse; then
  if (( $+commands[tac] )); then
    echo "$sorted_results" | tac
  else
    echo "$sorted_results" | tail -r
  fi
else
  echo "$sorted_results"
fi

log_verbose "Script execution completed"
