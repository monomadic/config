#!/usr/bin/env sh
verbose=false

log_verbose() {
  if $verbose; then
    echo "[DEBUG] $1" >&2
  fi
}

usage() {
  echo "Usage: $0 [--match PATTERN] [--sort SORT_OPTION] [--reverse] [--verbose]" >&2
  echo "Options:" >&2
  echo " --match PATTERN Only list files matching the given pattern" >&2
  echo " --sort SORT_OPTION Sort files by the given option (modified, size, name)" >&2
  echo " --reverse Reverse the sort order" >&2
  echo " --verbose Enable verbose logging" >&2
}

match_pattern=""
sort_option=""
reverse_option=""

while [ $# -gt 0 ]; do
  case $1 in
  --match)
    match_pattern="$2"
    shift 2
    ;;
  --sort)
    sort_option="$2"
    shift 2
    ;;
  --reverse)
    reverse_option="true"
    shift
    ;;
  --verbose)
    verbose=true
    shift
    ;;
  *)
    usage
    exit 1
    ;;
  esac
done

process_input_fd() {
  local dir="$1"
  log_verbose "Processing input with fd-video in directory: $dir"
  # Build fd options
  local fd_opts=""
  [ -n "$match_pattern" ] && fd_opts="$fd_opts --match '$match_pattern'"
  # Navigate to the target directory
  cd "$dir" || {
    log_verbose "Failed to change to directory: $dir"
    return 1
  }
  log_verbose "Executing in $dir: fd-video $fd_opts"

  # Execute fd and apply sorting logic if needed
  if [ -n "$sort_option" ]; then
    fd-video ${fd_opts} -0 | while IFS= read -r -d '' file; do
      log_verbose "Found: $file"
      case "$sort_option" in
      modified) printf "%s\t%s\0" "$(stat -f "%m" "$file" 2>/dev/null)" "$file" ;;
      size) printf "%s\t%s\0" "$(stat -f "%z" "$file" 2>/dev/null)" "$file" ;;
      name) printf "%s\t%s\0" "$file" "$file" ;;
      esac
    done | sort -z ${reverse_option:+-r} | awk 'BEGIN {RS="\0"; FS="\t"} {print $2}'
  else
    # If no sorting is needed, just output files as they are found
    fd-video ${fd_opts}
  fi
}

directories=$(ls-media-paths)
log_verbose "Directories to search: $directories"

if [ -z "$directories" ]; then
  echo "Error: No directories found from ls-media-paths" >&2
  exit 1
fi

for dir in $directories; do
  log_verbose "Searching directory: $dir"
  if [ ! -d "$dir" ]; then
    log_verbose "Skipping non-existent or non-directory: $dir"
    continue
  fi
  if [ ! -r "$dir" ]; then
    log_verbose "Cannot read directory $dir (permission denied)"
    continue
  fi
  file_count=$(fd -t f '\.(mp4|avi|mkv|mov|wmv|flv|webm|m4v|mpg|mpeg|3gp|3g2|mxf|roq|nsv|f4v|f4p|f4a|f4b)$' "$dir" | wc -l)
  log_verbose "Total matching files in $dir: $file_count"
  process_input_fd "$dir" | while IFS= read -r -d '' file; do
    printf '%s/%s\0' "$dir" "$file"
  done
done

log_verbose "Script execution completed"
