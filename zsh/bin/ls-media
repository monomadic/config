#!/usr/bin/env zsh

usage() {
  echo "Usage: $0 [--match-string STRING]... [--match-regex REGEX]... [--sort-modified | --sort-created] [--reverse] [--verbose]" >&2
  echo "Options:" >&2
  echo " --match-string STRING   Only list files where the path contains all the given strings (case-insensitive). Can be used multiple times." >&2
  echo " --match-regex REGEX     Only list files where the path matches all the given regex patterns (case-insensitive). Can be used multiple times." >&2
  echo " --sort-modified         Sort files by modification time" >&2
  echo " --sort-created          Sort files by creation time" >&2
  echo " --reverse               Reverse the sort order" >&2
  echo " --verbose               Enable verbose logging" >&2
}

verbose=false

log_verbose() {
  if $verbose; then
    echo "[DEBUG] $1" >&2
  fi
}

match_strings=()
match_regexes=()
sort_modified=false
sort_created=false
reverse=false

# Parse command-line arguments
while [ $# -gt 0 ]; do
  case $1 in
  --match-string)
    match_strings+=("$2")
    shift 2
    ;;
  --match-regex)
    match_regexes+=("$2")
    shift 2
    ;;
  --sort-modified)
    sort_modified=true
    shift
    ;;
  --sort-created)
    sort_created=true
    shift
    ;;
  --reverse)
    reverse=true
    shift
    ;;
  --verbose)
    verbose=true
    shift
    ;;
  *)
    usage
    exit 1
    ;;
  esac
done

process_input_fd() {
  local dir="$1"
  log_verbose "Processing input with fd-video in directory: $dir"
  cd "$dir" || {
    log_verbose "Failed to change to directory: $dir"
    return 1
  }

  # Build fd-video command arguments
  fd_video_cmd=(fd-video -t f --full-path --ignore-case -0)

  log_verbose "Executing in $dir: ${fd_video_cmd[*]}"

  # Execute fd-video and process results
  ${fd_video_cmd[@]} | while IFS= read -r -d $'\0' file; do
    match=true

    log_verbose "Checking match for file: $file"

    # Match strings
    for str in "${match_strings[@]}"; do
      if [[ "${file:l}" != *"${str:l}"* ]]; then
        log_verbose "String '$str' not found in file: $file"
        match=false
        break
      fi
    done

    # Match regexes
    if $match; then
      for regex in "${match_regexes[@]}"; do
        if [[ ! "${file:l}" =~ "${regex:l}" ]]; then
          log_verbose "Regex '$regex' not matching file: $file"
          match=false
          break
        fi
      done
    fi

    # Skip file if it doesn't match the criteria
    if ! $match; then
      continue
    fi

    # Get the full path
    full_path="$PWD/$file"

    # Handle sorting by modification or creation time using eza
    if $sort_modified; then
      mod_time=$(eza --no-filesize --no-permissions --time-style=long-iso --long "$full_path" | awk '{print $6 " " $7}')
      printf '%s\t%s\n' "$mod_time" "$full_path"
    elif $sort_created; then
      create_time=$(eza --no-filesize --no-permissions --time-style=long-iso --sort=created --long "$full_path" | awk '{print $6 " " $7}')
      printf '%s\t%s\n' "$create_time" "$full_path"
    else
      echo "$full_path"
    fi
  done
}

# Use Zsh array to properly handle directories with spaces
directories=("${(@f)$(ls-media-paths)}")
log_verbose "Directories to search: ${directories[*]}"
if [ ${#directories[@]} -eq 0 ]; then
  echo "Error: No directories found from ls-media-paths" >&2
  exit 1
fi

# Temporary file to store all results
temp_file=$(mktemp)
for dir in "${directories[@]}"; do
  log_verbose "Searching directory: $dir"
  if [ ! -d "$dir" ]; then
    log_verbose "Skipping non-existent or non-directory: $dir"
    continue
  fi
  if [ ! -r "$dir" ]; then
    log_verbose "Cannot read directory $dir (permission denied)"
    continue
  fi
  process_input_fd "$dir" >>"$temp_file"
done

# Sort and output results
if $sort_modified || $sort_created; then
  sort -n "$temp_file" | cut -f2-
else
  cat "$temp_file"
fi | {
  if $reverse; then
    if (( $+commands[tac] )); then
      tac
    else
      tail -r
    fi
  else
    cat
  fi
}

rm "$temp_file"
log_verbose "Script execution completed"
