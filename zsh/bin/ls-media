#!/usr/bin/env bash

usage() {
  echo "Usage: $0 [--match-string STRING]... [--match-regex REGEX]... [--sort SORT_OPTION] [--reverse] [--verbose]" >&2
  echo "Options:" >&2
  echo " --match-string STRING   Only list files where the path contains all the given strings (case-insensitive). Can be used multiple times." >&2
  echo " --match-regex REGEX     Only list files where the path matches all the given regex patterns (case-insensitive). Can be used multiple times." >&2
  echo " --sort SORT_OPTION      Sort files by the given option (modified, size, name)" >&2
  echo " --reverse               Reverse the sort order and the final list" >&2
  echo " --verbose               Enable verbose logging" >&2
}

verbose=false

log_verbose() {
  if $verbose; then
    echo "[DEBUG] $1" >&2
  fi
}

match_strings=()
match_regexes=()
sort_option=""
reverse=false

completions() {
  cat <<EOF
#!/usr/bin/env bash
# Bash completion script for test_script.sh

_test_script_completions() {
  local cur prev opts
  COMPREPLY=()
  cur="\${COMP_WORDS[COMP_CWORD]}"
  prev="\${COMP_WORDS[COMP_CWORD-1]}"
  opts="--match-string --match-regex --sort --reverse --verbose completions"

  case "\${prev}" in
    --sort)
      COMPREPLY=( \$(compgen -W "modified size name" -- "\${cur}") )
      return 0
      ;;
  esac

  COMPREPLY=( \$(compgen -W "\${opts}" -- "\${cur}") )
}

complete -F _test_script_completions test_script.sh
EOF
}

# Check if the first argument is 'completions'
if [ "$1" == "completions" ]; then
  completions
  exit 0
fi

# Parse command-line arguments
while [ $# -gt 0 ]; do
  case $1 in
  --match-string)
    match_strings+=("$2")
    shift 2
    ;;
  --match-regex)
    match_regexes+=("$2")
    shift 2
    ;;
  --sort)
    sort_option="$2"
    shift 2
    ;;
  --reverse)
    reverse=true
    shift
    ;;
  --verbose)
    verbose=true
    shift
    ;;
  *)
    usage
    exit 1
    ;;
  esac
done

process_input_fd() {
  local dir="$1"
  log_verbose "Processing input with fd-video in directory: $dir"
  cd "$dir" || {
    log_verbose "Failed to change to directory: $dir"
    return 1
  }

  # Build fd-video command arguments
  fd_video_cmd=(fd-video -t f --full-path --ignore-case -0)

  log_verbose "Executing in $dir: ${fd_video_cmd[*]}"

  # Execute fd-video and process results
  "${fd_video_cmd[@]}" | while IFS= read -r -d '' file; do
    match=true

    log_verbose "Checking match for file: $file"

    # Match strings
    for str in "${match_strings[@]}"; do
      shopt -s nocasematch
      if [[ "$file" != *"$str"* ]]; then
        log_verbose "String '$str' not found in file: $file"
        match=false
        shopt -u nocasematch
        break
      fi
      shopt -u nocasematch
    done

    # Match regexes
    if $match; then
      for regex in "${match_regexes[@]}"; do
        shopt -s nocasematch
        if [[ ! "$file" =~ $regex ]]; then
          log_verbose "Regex '$regex' not matching file: $file"
          match=false
          shopt -u nocasematch
          break
        fi
        shopt -u nocasematch
      done
    fi

    # Skip file if it doesn't match the criteria
    if ! $match; then
      continue
    fi

    # Process the file (sorting, printing, etc.)
    if [ -n "$sort_option" ]; then
      case "$sort_option" in
      modified)
        mod_time=$(stat -f "%m" "$file")
        printf '%s\t%s\n' "$mod_time" "$file"
        ;;
      size)
        file_size=$(stat -f "%z" "$file")
        printf '%s\t%s\n' "$file_size" "$file"
        ;;
      name)
        echo "$file"
        ;;
      *)
        echo "$file"
        ;;
      esac
    else
      echo "$file"
    fi
  done | {
    if [ -n "$sort_option" ]; then
      case "$sort_option" in
      modified | size)
        sort -n -k1,1 | cut -f2-
        ;;
      name)
        sort
        ;;
      *)
        cat
        ;;
      esac
    else
      cat
    fi
  } | while IFS= read -r file; do
    printf '%s/%s\n' "$dir" "$file"
  done
}

directories=$(ls-media-paths)
log_verbose "Directories to search: $directories"
if [ -z "$directories" ]; then
  echo "Error: No directories found from ls-media-paths" >&2
  exit 1
fi

# Temporary file to store all results
temp_file=$(mktemp)
for dir in $directories; do
  log_verbose "Searching directory: $dir"
  if [ ! -d "$dir" ]; then
    log_verbose "Skipping non-existent or non-directory: $dir"
    continue
  fi
  if [ ! -r "$dir" ]; then
    log_verbose "Cannot read directory $dir (permission denied)"
    continue
  fi
  process_input_fd "$dir" >>"$temp_file"
done

# Reverse the entire list if --reverse option is used
if $reverse; then
  tac "$temp_file"
else
  cat "$temp_file"
fi
rm "$temp_file"
log_verbose "Script execution completed"
